<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                                   "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>


 <query name="autorizacionCapitacion.obtenerMedicamentosInsumosPorAutorizarOrdenMedica">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.MedicamentoInsumoAutorizacionOrdenDto(
 					art.codigo, art.codigoInterfaz, art.descripcion, ff.nombre, art.concentracion, 
 					um.nombre, art.subgrupo, nat.id.acronimo, nat.nombre, nat.esMedicamento, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre, ds.cantidad,
 					ds.dosis, ds.frecuencia, ds.tipoFrecuencia, ds.via, ds.diasTratamiento, detc.cubierto)
 		FROM Solicitudes sol
 			INNER JOIN sol.detCargoses detc
 			INNER JOIN sol.solicitudesMedicamentos sm
 			INNER JOIN sm.detalleSolicitudeses ds
 			INNER JOIN ds.articuloByArticulo art
 			INNER JOIN art.naturalezaArticulo nat
 			LEFT JOIN art.nivelAtencion niva
 			LEFT JOIN art.unidadMedida um 
			LEFT JOIN art.formaFarmaceutica ff 
 			LEFT JOIN ds.autorizacionesEntidadesSub aes
 			LEFT JOIN sol.diagnosticos diag
	WHERE sol.numeroSolicitud= :codigoOrden
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
		AND detc.articulo=art.codigo
 </query>
 
 <query name="autorizacionCapitacion.obtenerServiciosCirugiaPorAutorizarOrdenMedica">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 					serv.codigo, rs.descripcion, rs.codigoPropietario, gs.numDiasUrgente, 
 					gs.numDiasNormal, gs.codigo, esp.codigo, ts.acronimo, niva.consecutivo, 
 					niva.descripcion, 
 					case when diag is not null then diag.id.acronimo else diag2.id.acronimo end, 
 					case when diag is not null then diag.id.tipoCie else diag2.id.tipoCie end, 
 					case when diag is not null then diag.nombre else diag2.nombre end,
 					tmon.codigo, 1, cont.codigo, scps.cubierto)
 		FROM Solicitudes sol
 			INNER JOIN sol.solicitudesCirugia sc
 			INNER JOIN sc.solCirugiaPorServicios scps
 			INNER JOIN scps.servicios serv
 			INNER JOIN serv.nivelAtencion niva
 			INNER JOIN serv.gruposServicios gs 
			INNER JOIN serv.especialidades esp 
			INNER JOIN serv.tiposSerNaturaleza tsn 
			INNER JOIN tsn.tiposServicio ts 
			INNER JOIN serv.referenciasServicios rs 
			INNER JOIN rs.tarifariosOficiales to 
			LEFT JOIN scps.contratos cont
 			LEFT JOIN scps.autorizacionesEntidadesSub aes
 			LEFT JOIN sol.diagnosticos diag
 			LEFT JOIN gs.tiposMonto tmon
 			LEFT JOIN scps.diagPostOperaSolCxes dposc
 			LEFT JOIN dposc.diagnosticos diag2
	WHERE sol.numeroSolicitud= :codigoOrden
		AND to.codigo =:tarifarioOficial
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
 </query>
 
 <query name="autorizacionCapitacion.obtenerProcedimientosPorAutorizarOrdenMedica">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 					serv.codigo, rs.descripcion, rs.codigoPropietario, gs.numDiasUrgente, 
 					gs.numDiasNormal, gs.codigo, esp.codigo, ts.acronimo, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre,
 					tmon.codigo, detc.cubierto)
 		FROM Solicitudes sol
 			INNER JOIN sol.detCargoses detc
 			INNER JOIN sol.solProcedimientos sp
 			INNER JOIN sp.serviciosByCodigoServicioSolicitado serv
 			INNER JOIN serv.nivelAtencion niva
 			INNER JOIN serv.gruposServicios gs 
			INNER JOIN serv.especialidades esp 
			INNER JOIN serv.tiposSerNaturaleza tsn 
			INNER JOIN tsn.tiposServicio ts 
			INNER JOIN serv.referenciasServicios rs 
			INNER JOIN rs.tarifariosOficiales to 
 			LEFT JOIN sp.autorizacionesEntidadesSub aes
 			LEFT JOIN sol.diagnosticos diag
 			LEFT JOIN gs.tiposMonto tmon
	WHERE sol.numeroSolicitud= :codigoOrden
		AND to.codigo =:tarifarioOficial
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
 </query>
 
 <query name="autorizacionCapitacion.obtenerInterconsultasPorAutorizarOrdenMedica">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 					serv.codigo, rs.descripcion, rs.codigoPropietario, gs.numDiasUrgente, 
 					gs.numDiasNormal, gs.codigo, esp.codigo, ts.acronimo, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre,
 					tmon.codigo, detc.cubierto)
 		FROM Solicitudes sol
 			INNER JOIN sol.detCargoses detc
 			INNER JOIN sol.solicitudesInter si
 			INNER JOIN si.servicios serv
 			INNER JOIN serv.nivelAtencion niva
 			INNER JOIN serv.gruposServicios gs 
			INNER JOIN serv.especialidades esp 
			INNER JOIN serv.tiposSerNaturaleza tsn 
			INNER JOIN tsn.tiposServicio ts 
			INNER JOIN serv.referenciasServicios rs 
			INNER JOIN rs.tarifariosOficiales to 
 			LEFT JOIN si.autorizacionesEntidadesSub aes
 			LEFT JOIN sol.diagnosticos diag
 			LEFT JOIN gs.tiposMonto tmon
	WHERE sol.numeroSolicitud= :codigoOrden
		AND to.codigo =:tarifarioOficial
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
 </query>
 
 <query name="autorizacionCapitacion.obtenerConsultasPorAutorizarOrdenMedica">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 					serv.codigo, rs.descripcion, rs.codigoPropietario, gs.numDiasUrgente, 
 					gs.numDiasNormal, gs.codigo, esp.codigo, ts.acronimo, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre,
 					tmon.codigo)
 		FROM Solicitudes sol
 			INNER JOIN sol.solicitudesConsulta scon
 			INNER JOIN scon.servicios serv
 			INNER JOIN serv.nivelAtencion niva
 			INNER JOIN serv.gruposServicios gs 
			INNER JOIN serv.especialidades esp 
			INNER JOIN serv.tiposSerNaturaleza tsn 
			INNER JOIN tsn.tiposServicio ts 
			INNER JOIN serv.referenciasServicios rs 
			INNER JOIN rs.tarifariosOficiales to 
 			LEFT JOIN scon.autorizacionesEntidadesSub aes
 			LEFT JOIN sol.diagnosticos diag
 			LEFT JOIN gs.tiposMonto tmon
	WHERE sol.numeroSolicitud= :codigoOrden
		AND to.codigo =:tarifarioOficial
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
 </query>
 
 <query  name="autorizacionCapitacion.obtenerServiciosPorAutorizarCargoDirecto">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 					serv.codigo, rs.descripcion, rs.codigoPropietario, gs.numDiasUrgente, 
 					gs.numDiasNormal, gs.codigo, esp.codigo, ts.acronimo, niva.consecutivo, 
 					niva.descripcion,  					
 					case when diag is not null then diag.id.acronimo else diag2.id.acronimo end,
 					case when diag is not null then diag.id.tipoCie else diag2.id.tipoCie end,
 					case when diag is not null then diag.nombre else diag2.nombre end,
 					tmon.codigo, detc.cubierto)
 		FROM Solicitudes sol
 			INNER JOIN sol.detCargoses detc
 			INNER JOIN detc.serviciosByServicio serv
 			INNER JOIN serv.nivelAtencion niva
 			INNER JOIN serv.gruposServicios gs 
			INNER JOIN serv.especialidades esp 
			INNER JOIN serv.tiposSerNaturaleza tsn 
			INNER JOIN tsn.tiposServicio ts 
			INNER JOIN serv.referenciasServicios rs 
			INNER JOIN rs.tarifariosOficiales to 
			LEFT JOIN sol.diagnosticos diag
			LEFT JOIN gs.tiposMonto tmon
			INNER JOIN sol.cargosDirectos carDir
			LEFT JOIN carDir.cargosDirectosHc carDirHc
			LEFT JOIN carDirHc.diagCargosDirectosHcs diagCarDirHc
			LEFT JOIN diagCarDirHc.diagnosticos diag2			
	WHERE sol.numeroSolicitud= :codigoOrden
		AND to.codigo =:tarifarioOficial
		AND serv.codigo 
			NOT IN(SELECT ser.codigo 
						FROM Solicitudes s
							INNER JOIN s.autoEntsubSolicitudeses aess
							INNER JOIN aess.autorizacionesEntidadesSub aes
							INNER JOIN aes.autorizacionesEntSubServis aesser
							INNER JOIN aesser.servicios ser
					WHERE s.numeroSolicitud=sol.numeroSolicitud
						AND aes.estado= :estadoAutorizacionAutorizada)
 </query>
 
 <query name="autorizacionCapitacion.obtenerMedicamentosInsumosPorAutorizarOrdenAmbulatoria">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.MedicamentoInsumoAutorizacionOrdenDto(
 					art.codigo, art.codigoInterfaz, art.descripcion, ff.nombre, art.concentracion, 
 					um.nombre, art.subgrupo, nat.id.acronimo, nat.nombre, nat.esMedicamento, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre, doaa.cantidad,
 					doaa.dosis, doaa.frecuencia, tipf.nombre, viaa.nombre, doaa.duracionTratamiento)
 		FROM OrdenesAmbulatorias oa
 			INNER JOIN oa.detOrdenAmbArticulos doaa
 			INNER JOIN doaa.articulo art
 			INNER JOIN art.naturalezaArticulo nat
 			LEFT JOIN art.nivelAtencion niva
 			LEFT JOIN art.unidadMedida um 
			LEFT JOIN art.formaFarmaceutica ff 
 			LEFT JOIN doaa.autorizacionesEntidadesSub aes
 			LEFT JOIN oa.diagnosticos diag
 			LEFT JOIN doaa.tiposFrecuencia tipf
 			LEFT JOIN doaa.viasAdministracion viaa
	WHERE oa.codigo= :codigoOrden
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
 </query>
 
 <query name="autorizacionCapitacion.obtenerServiciosPorAutorizarOrdenAmbulatoria">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 					serv.codigo, rs.descripcion, rs.codigoPropietario, gs.numDiasUrgente, 
 					gs.numDiasNormal, gs.codigo, esp.codigo, ts.acronimo, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre,
 					tmon.codigo, doas.cantidad)
 		FROM OrdenesAmbulatorias oa
 			INNER JOIN oa.detOrdenAmbServicio doas
 			INNER JOIN doas.servicios serv
 			INNER JOIN serv.nivelAtencion niva
 			INNER JOIN serv.gruposServicios gs 
			INNER JOIN serv.especialidades esp 
			INNER JOIN serv.tiposSerNaturaleza tsn 
			INNER JOIN tsn.tiposServicio ts 
			INNER JOIN serv.referenciasServicios rs 
			INNER JOIN rs.tarifariosOficiales to 
 			LEFT JOIN doas.autorizacionesEntidadesSub aes
 			LEFT JOIN oa.diagnosticos diag
 			LEFT JOIN gs.tiposMonto tmon
	WHERE oa.codigo= :codigoOrden
		AND to.codigo =:tarifarioOficial
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
 </query> 
 
 <query name="autorizacionCapitacion.obtenerServiciosPorAutorizarPeticion">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 					serv.codigo, rs.descripcion, rs.codigoPropietario, gs.numDiasUrgente, 
 					gs.numDiasNormal, gs.codigo, esp.codigo, ts.acronimo, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre,
 					tmon.codigo, ps.numeroServicio, cont.codigo, ps.cubierto)
 		FROM PeticionQx pet
 			INNER JOIN pet.peticionesServicios ps
 			INNER JOIN ps.servicios serv
 			INNER JOIN serv.nivelAtencion niva
 			INNER JOIN serv.gruposServicios gs 
			INNER JOIN serv.especialidades esp 
			INNER JOIN serv.tiposSerNaturaleza tsn 
			INNER JOIN tsn.tiposServicio ts 
			INNER JOIN serv.referenciasServicios rs 
			INNER JOIN rs.tarifariosOficiales to 
			LEFT JOIN ps.contratos cont
 			LEFT JOIN ps.autorizacionesEntidadesSub aes
 			LEFT JOIN pet.diagnosticos diag
 			LEFT JOIN gs.tiposMonto tmon
	WHERE pet.codigo= :codigoPeticion
		AND to.codigo =:tarifarioOficial
		AND (aes.consecutivo IS NULL OR aes.estado= :estadoAutorizacionAnulada)
 </query> 
 
 
 <sql-query name="autorizacionCapitacion.obtenerOrdenesPorAutorizarPorPaciente">
 	<return-scalar column="codigoOrden" type="long" />
	<return-scalar column="consecutivoOrden" type="string" />
	<return-scalar column="tipoOrden" type="integer" />
	<return-scalar column="claseOrden" type="integer" />
	<return-scalar column="fechaOrden" type="date" />
	<return-scalar column="urgenteOrden" type="string" />
	<return-scalar column="codigoCCEjecuta" type="integer" />
	<return-scalar column="nombreCCEjecuta" type="string" />
	<return-scalar column="tipoEntidadCCEjecuta" type="string" />
	<return-scalar column="codigoIngreso" type="integer" />
	<return-scalar column="consecutivoIngreso" type="string" />
	<return-scalar column="fechaPosponer" type="date" />
	<return-scalar column="pyp" type="string" />
	<![CDATA[
 		SELECT ordenesPorAutorizar.codigoOrden, ordenesPorAutorizar.consecutivoOrden, ordenesPorAutorizar.tipoOrden,
		       ordenesPorAutorizar.claseOrden, ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.urgenteOrden, 
		       ordenesPorAutorizar.codigoCCEjecuta, ordenesPorAutorizar.nombreCCEjecuta, ordenesPorAutorizar.tipoEntidadCCEjecuta, 
		       ordenesPorAutorizar.codigoIngreso, 
		       ordenesPorAutorizar.consecutivoIngreso, ordenesPorAutorizar.fechaPosponer, ordenesPorAutorizar.pyp
		FROM 
		((-- Consulta de Ordenes Ambulatorias de Articulos
		SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
			       :ordenAmbulatoria AS claseOrden, :descAmbulatoria as nombreClase,
			       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
			       '' AS tipoEntidadCCEjecuta,
			       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
			       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.ordenes_ambulatorias oa
			  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso) 
			  INNER JOIN ordenes.det_orden_amb_articulo doaa ON (doaa.codigo_orden=oa.codigo)
			  INNER JOIN facturacion.contratos cont ON (cont.codigo=doaa.contrato_convenio)
			  INNER JOIN facturacion.convenios conv ON (conv.codigo=cont.convenio)
			  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
			  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
			  LEFT JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
		WHERE oa.codigo_paciente = :codigoPaciente
		  AND oa.tipo_orden = :tipoOrdenAmbArticulo
		  AND oa.estado= :estadoOrdenAmbPendiente
		  AND doaa.cubierto = :cubierto
		  AND conv.tipo_contrato = :tipoContrato
		  AND conv.capitacion_subcontratada = :capitacionSubcontradada
		  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
		  --Se valida que exista por lo menos un articulo sin autorizar
		  --o que si tiene autorización esta se encuentre ANULADA
		  AND (SELECT COUNT(0) 
		       FROM ordenes.det_orden_amb_articulo doaa1
		       	  INNER JOIN facturacion.contratos cont1 ON (cont1.codigo=doaa1.contrato_convenio)
			  	  INNER JOIN facturacion.convenios conv1 ON (conv1.codigo=cont1.convenio)
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doaa1.auto_ent_sub)
		       WHERE doaa1.codigo_orden=oa.codigo
		       	AND doaa1.cubierto = :cubierto
		       	AND conv1.tipo_contrato = :tipoContrato
		  		AND conv1.capitacion_subcontratada = :capitacionSubcontradada
		        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
		      ) > 0)
		UNION
		(-- Consulta de Ordenes Ambulatorias de Servicios
		SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
			       :ordenAmbulatoria AS claseOrden, :descAmbulatoria as nombreClase, 
			       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
			       '' AS tipoEntidadCCEjecuta,
			       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
			       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.ordenes_ambulatorias oa
			  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso)
			  INNER JOIN ordenes.det_orden_amb_servicio doas ON (doas.codigo_orden=oa.codigo)
			  INNER JOIN facturacion.contratos cont ON (cont.codigo=doas.contrato_convenio)
			  INNER JOIN facturacion.convenios conv ON (conv.codigo=cont.convenio)
			  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
			  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
			  LEFT JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
		WHERE oa.codigo_paciente = :codigoPaciente 
		  AND oa.tipo_orden = :tipoOrdenAmbServicio
		  AND oa.estado= :estadoOrdenAmbPendiente
		  AND doas.cubierto = :cubierto
		  AND conv.tipo_contrato = :tipoContrato
		  AND conv.capitacion_subcontratada = :capitacionSubcontradada
		  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
		  --Se valida que exista por lo menos un servicio sin autorizar
		  --o que si tiene autorización esta este ANULADA
		  AND (SELECT COUNT(0) 
		       FROM ordenes.det_orden_amb_servicio doas1
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doas1.auto_ent_sub)
		       WHERE doas1.codigo_orden=oa.codigo
		        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
		      ) > 0)
		UNION
		(-- Consulta de Peticiones de Cirugia
		SELECT DISTINCT pet.codigo AS codigoOrden, pet.codigo||'' AS consecutivoOrden, :tipoOrdenAmbServicio AS tipoOrden,
			       :peticion AS claseOrden, :descPeticion as nombreClase, 
			       pet.fecha_peticion AS fechaOrden, CASE WHEN pet.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
			       '' AS tipoEntidadCCEjecuta,
			       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, pp.fecha_posponer AS fechaPosponer,
			       'N' AS pyp
			FROM salascirugia.peticion_qx pet
			  INNER JOIN manejopaciente.ingresos ing ON (ing.id=pet.ingreso)
			  INNER JOIN salascirugia.peticiones_servicio ps ON (ps.peticion_qx=pet.codigo)
			  INNER JOIN facturacion.contratos cont ON (cont.codigo=ps.contrato_convenio)
			  INNER JOIN facturacion.convenios conv ON (conv.codigo=cont.convenio)
			  LEFT JOIN salascirugia.solicitudes_cirugia sc ON (sc.codigo_peticion=pet.codigo)
			  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=sc.numero_solicitud)
			  LEFT JOIN ordenes.peticiones_posponer pp ON (pp.peticion=pet.codigo)
		WHERE pet.paciente = :codigoPaciente
		  AND pet.estado_peticion in (:estadosPeticion)
		  AND ps.cubierto = :cubierto
		  AND conv.tipo_contrato = :tipoContrato
		  AND conv.capitacion_subcontratada = :capitacionSubcontradada
		  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
		  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
		  --o que si tiene autorización esta este ANULADA
		  AND (SELECT COUNT(0) 
		       FROM salascirugia.peticiones_servicio ps1
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ps1.auto_ent_sub)
		       WHERE ps1.peticion_qx=pet.codigo
		        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
		      ) > 0)
		UNION
		(-- Consulta de Cargos Directos de Articulos
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
			       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden, :descMedica as nombreClase,
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
			  INNER JOIN facturacion.convenios conv ON (conv.codigo=detc.convenio)
			  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			  LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente 
		  AND sol.tipo = :tipoSolicitudCargoDirectoArticulo
		  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
		  AND detc.estado = :estadoCargoCargado
		  AND detc.cubierto = :cubierto
		  AND conv.tipo_contrato = :tipoContrato
		  AND conv.capitacion_subcontratada = :capitacionSubcontradada 
		  --Se valida que el numero de articulos cubiertos por el convenio capitado sea mayor
		  --al número de articulos autorizados
		  --o que si tiene autorización esta este ANULADA
		  AND ((SELECT COUNT(0) 
		       FROM ordenes.solicitudes sol1
		          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
		          INNER JOIN facturacion.convenios conv1 ON (conv1.codigo=detc1.convenio)
		       WHERE detc1.solicitud=sol.numero_solicitud
		          AND detc1.cubierto = :cubierto
				  AND conv1.tipo_contrato = :tipoContrato
				  AND conv1.capitacion_subcontratada = :capitacionSubcontradada)
		  	 >
		  	(SELECT COUNT(0) 
		       FROM ordenes.solicitudes_medicamentos sm1
		          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
		          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
		       WHERE sm1.numero_solicitud=sol.numero_solicitud
		        AND aes1.estado= :estadoAutorizacionAutorizado)
		     )) 
		UNION
		(-- Consulta de Cargos Directos de Servicios
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
			       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden, :descMedica as nombreClase, 
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
			  INNER JOIN facturacion.convenios conv ON (conv.codigo=detc.convenio)
			  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			  LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente 
		  AND sol.tipo = :tipoSolicitudCargoDirectoServicio
		  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
		  AND detc.estado = :estadoCargoCargado
		  AND detc.cubierto = :cubierto
		  AND conv.tipo_contrato = :tipoContrato
		  AND conv.capitacion_subcontratada = :capitacionSubcontradada
		  --Se valida que exista la cantidad de servicios del cargo directo
		  --sea menor a la cantidad de servicios autorizados
		  AND (SELECT COUNT(0) 
		       FROM facturacion.det_cargos detc1
		       WHERE detc1.solicitud=sol.numero_solicitud) > 
		      (SELECT COUNT(0) 
		       FROM ordenes.auto_entsub_solicitudes aess1
		          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=aess1.autorizacion_ent_sub)
		          INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv1 ON (aesserv1.autorizacion_ent_sub=aes1.consecutivo)
		       WHERE aess1.numero_solicitud=sol.numero_solicitud
		       	AND aes1.estado= :estadoAutorizacionAutorizado))
		UNION
		(-- Consulta de Cargos Directos de Cirugia
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
			       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden, :descMedica as nombreClase,
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
			   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
			   INNER JOIN facturacion.contratos cont ON (cont.codigo=scps.contrato_convenio)
			   INNER JOIN facturacion.convenios conv ON (conv.codigo=cont.convenio)
			   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente 
		  AND sol.tipo = :tipoSolicitudCirugia
		  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
		  AND scps.cubierto = :cubierto
		  AND conv.tipo_contrato = :tipoContrato
		  AND conv.capitacion_subcontratada = :capitacionSubcontradada 
		  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
		  --o que si tiene autorización esta se encuentre ANULADA
		  AND (SELECT COUNT(0) 
		       FROM salascirugia.solicitudes_cirugia sc1
		          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
		       WHERE sc1.numero_solicitud=sol.numero_solicitud
		        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
		      ) > 0)
		UNION
		(-- Consulta de Solicitudes de Medicamentos
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
			       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, :descMedica as nombreClase, 
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente 
		  AND sol.tipo = :tipoSolicitudMedicamento
		  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
		  --Se valida que el numero de articulos cubiertos por el convenio capitado sea mayor
		  --al número de articulos autorizados
		  --o que si tiene autorización esta este ANULADA
		  AND ((SELECT COUNT(0) 
		       FROM ordenes.solicitudes sol1
		          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
		          INNER JOIN facturacion.convenios conv1 ON (conv1.codigo=detc1.convenio)
		       WHERE detc1.solicitud=sol.numero_solicitud
		          AND detc1.cubierto = :cubierto
				  AND conv1.tipo_contrato = :tipoContrato
				  AND conv1.capitacion_subcontratada = :capitacionSubcontradada)
		  	 >
		  	(SELECT COUNT(0) 
		       FROM ordenes.solicitudes_medicamentos sm1
		          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
		          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
		       WHERE sm1.numero_solicitud=sol.numero_solicitud
		        AND aes1.estado= :estadoAutorizacionAutorizado)
		     ))
		UNION
		(-- Consulta de Solicitudes de Cirugia
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
			       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, :descMedica as nombreClase, 
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
			   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
			   INNER JOIN facturacion.contratos cont ON (cont.codigo=scps.contrato_convenio)
			   INNER JOIN facturacion.convenios conv ON (conv.codigo=cont.convenio)
			   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente
		  AND sol.tipo = :tipoSolicitudCirugia
		  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
		  AND scps.cubierto = :cubierto
		  AND conv.tipo_contrato = :tipoContrato
		  AND conv.capitacion_subcontratada = :capitacionSubcontradada
		  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
		  --o que si tiene autorización esta se encuentre ANULADA
		  AND (SELECT COUNT(0) 
		       FROM salascirugia.solicitudes_cirugia sc1
		          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
		       WHERE sc1.numero_solicitud=sol.numero_solicitud
		        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
		      ) > 0)
		UNION
		(-- Consulta de Solicitudes de Procedimientos
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
			       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, :descMedica as nombreClase, 
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente
		  AND sol.tipo = :tipoSolicitudProcedimiento
		  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
		  --Se valida que exista por lo menos un procedimiento que pertenezca
		  --a un convenio capitado que maneje capitación subcontratada y que
		  --se encuentre cubierto
		  AND (SELECT COUNT(0)
		       FROM facturacion.det_cargos detc1
		        INNER JOIN facturacion.convenios conv1 ON (conv1.codigo=detc1.convenio)
		       WHERE detc1.solicitud=sol.numero_solicitud 
		        AND detc1.cubierto = :cubierto
		        AND conv1.tipo_contrato = :tipoContrato
		        AND conv1.capitacion_subcontratada = :capitacionSubcontradada) > 0 
		  --Se valida que exista por lo menos un procedimiento sin autorizar
		  --o que si tiene autorización esta se encuentre ANULADA
		  AND (SELECT COUNT(0) 
		       FROM ordenes.sol_procedimientos sp2
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=sp2.auto_ent_sub)
		       WHERE sp2.numero_solicitud=sol.numero_solicitud
		        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
		      )       
		UNION
		(-- Consulta de Solicitudes de InterConsultas
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
			       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, :descMedica as nombreClase, 
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente
		  AND sol.tipo = :tipoSolicitudInterconsulta
		  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
		  --Se valida que exista por lo menos una interconsulta que pertenezca
		  --a un convenio capitado que maneje capitación subcontratada y que
		  --se encuentre cubierto
		  AND (SELECT COUNT(0)
		       FROM facturacion.det_cargos detc1
		        INNER JOIN facturacion.convenios conv1 ON (conv1.codigo=detc1.convenio)
		       WHERE detc1.solicitud=sol.numero_solicitud 
		        AND detc1.cubierto = :cubierto
		        AND conv1.tipo_contrato = :tipoContrato
		        AND conv1.capitacion_subcontratada = :capitacionSubcontradada) > 0 
		  --Se valida que exista por lo menos una interconsulta sin autorizar
		  --o que si tiene autorización esta se encuentre ANULADA
		  AND (SELECT COUNT(0) 
		       FROM ordenes.solicitudes_inter si2
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=si2.auto_ent_sub)
		       WHERE si2.numero_solicitud=sol.numero_solicitud
		        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
		      )   
		UNION
		(-- Consulta de Solicitudes de Consultas
		SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
			       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, :descMedica as nombreClase, 
			       sol.fecha_solicitud AS fechaOrden, 
			       CASE WHEN sol.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, cc.nombre AS nombreCCEjecuta, 
			       cc.tipo_entidad_ejecuta AS tipoEntidadCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
			       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp
			FROM ordenes.solicitudes sol
			   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
			   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
			   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		WHERE cue.codigo_paciente = :codigoPaciente
		  AND sol.tipo = :tipoSolicitudConsulta
		  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
		  --Se valida que exista por lo menos una consulta que pertenezca
		  --a un convenio capitado que maneje capitación subcontratada y que
		  --se encuentre cubierto
		  AND (SELECT COUNT(0)
		       FROM facturacion.det_cargos detc1
		        INNER JOIN facturacion.convenios conv1 ON (conv1.codigo=detc1.convenio)
		       WHERE detc1.solicitud=sol.numero_solicitud 
		        AND detc1.cubierto = :cubierto
		        AND conv1.tipo_contrato = :tipoContrato
		        AND conv1.capitacion_subcontratada = :capitacionSubcontradada) > 0 
		  --Se valida que exista por lo menos una consulta sin autorizar
		  --o que si tiene autorización esta se encuentre ANULADA
		  AND (SELECT COUNT(0) 
		       FROM ordenes.solicitudes_consulta scon2
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=scon2.auto_ent_sub)
		       WHERE scon2.numero_solicitud=sol.numero_solicitud
		        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
		      )) ordenesPorAutorizar
		ORDER BY ordenesPorAutorizar.codigoIngreso, 
		  ordenesPorAutorizar.nombreClase, ordenesPorAutorizar.nombreCCEjecuta,
		  ordenesPorAutorizar.consecutivoOrden
 	]]>
 </sql-query>
 	
	<query name="autorizacionCapitacion.obtenerViaIngresoPorIngreso">
		SELECT via.codigo
			FROM Ingresos ing
				INNER JOIN ing.cuentases cue
				INNER JOIN cue.viasIngreso via
		WHERE ing.id= :codigoIngreso
			ORDER BY cue.fechaApertura DESC, cue.horaApertura DESC
	</query>
	
	<sql-query name="autorizacionCapitacion.obtenerOrdenesMedicasPorAutorizar">
	 	<return-scalar column="codigoOrden" type="long" />
		<return-scalar column="consecutivoOrden" type="string" />
		<return-scalar column="tipoOrden" type="integer" />
		<return-scalar column="claseOrden" type="integer" />
		<return-scalar column="fechaOrden" type="date" />
		<return-scalar column="urgenteOrden" type="string" />
		<return-scalar column="codigoCCEjecuta" type="integer" />
		<return-scalar column="nombreCCEjecuta" type="string" />
		<return-scalar column="codigoIngreso" type="integer" />
		<return-scalar column="consecutivoIngreso" type="string" />
		<return-scalar column="fechaPosponer" type="date" />
		<return-scalar column="pyp" type="string" />
		<return-scalar column="codigoPaciente" type="integer" />
		<return-scalar column="tipoIdPaciente" type="string" />
		<return-scalar column="numeroIdPaciente" type="string" />
		<return-scalar column="primerNombrePaciente" type="string" />
		<return-scalar column="segundoNombrePaciente" type="string" />
		<return-scalar column="primerApellidoPaciente" type="string" />
		<return-scalar column="segundoApellidoPaciente" type="string" />
		<![CDATA[
			SELECT DISTINCT ordenesPorAutorizar.codigoOrden, ordenesPorAutorizar.consecutivoOrden, ordenesPorAutorizar.tipoOrden,
		       ordenesPorAutorizar.claseOrden, ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.urgenteOrden, 
		       ordenesPorAutorizar.codigoCCEjecuta, ordenesPorAutorizar.nombreCCEjecuta, ordenesPorAutorizar.codigoIngreso, 
		       ordenesPorAutorizar.consecutivoIngreso, ordenesPorAutorizar.fechaPosponer, ordenesPorAutorizar.pyp, ordenesPorAutorizar.codigoPaciente, 
		       ordenesPorAutorizar.tipoIdPaciente, ordenesPorAutorizar.numeroIdPaciente, ordenesPorAutorizar.primerNombrePaciente,
		       ordenesPorAutorizar.segundoNombrePaciente, ordenesPorAutorizar.primerApellidoPaciente, ordenesPorAutorizar.segundoApellidoPaciente
			FROM 
			((-- Consulta de Cargos Directos de Articulos
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
				       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
				  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				  LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (sol.fecha_solicitud >= :fechaInicio
		              AND sol.fecha_solicitud <= :fechaFin)
				  AND sol.tipo = :tipoSolicitudCargoDirectoArticulo
				  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
				  AND detc.estado = :estadoCargoCargado
				  AND detc.cubierto = :cubierto
				  AND detc.contrato = :codigoContrato
				  AND solp.fecha_posponer IS NULL
				  --Se valida que el numero de articulos cubiertos por el convenio capitado sea mayor
				  --al número de articulos autorizados
				  --o que si tiene autorización esta este ANULADA
				  AND ((SELECT COUNT(0) 
				       FROM ordenes.solicitudes sol1
				          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
				       WHERE detc1.solicitud=sol.numero_solicitud
				          AND detc1.cubierto = :cubierto
						  AND detc1.contrato = :codigoContrato)
				  	 >
				  	(SELECT COUNT(0) 
				       FROM ordenes.solicitudes_medicamentos sm1
				          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
				          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
				       WHERE sm1.numero_solicitud=sol.numero_solicitud
				        AND aes1.estado= :estadoAutorizacionAutorizado)
				     )) 
			UNION
			(-- Consulta de Cargos Directos de Servicios
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
				       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
				  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				  LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
      --Se obtienen las ordenes de acuerdo al rango de fechas
		  WHERE (sol.fecha_solicitud >= :fechaInicio
	              AND sol.fecha_solicitud <= :fechaFin)
			  AND sol.tipo = :tipoSolicitudCargoDirectoServicio
			  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
			  AND detc.estado = :estadoCargoCargado
			  AND detc.cubierto = :cubierto
			  AND detc.contrato = :codigoContrato
			  AND solp.fecha_posponer IS NULL
	      	  --Se valida que exista la cantidad de servicios del cargo directo
			  --sea menor a la cantidad de servicios autorizados
			  AND (SELECT COUNT(0) 
			       FROM facturacion.det_cargos detc1
			       WHERE detc1.solicitud=sol.numero_solicitud) > 
			      (SELECT COUNT(0) 
			       FROM ordenes.auto_entsub_solicitudes aess1
			          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=aess1.autorizacion_ent_sub)
			          INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv1 ON (aesserv1.autorizacion_ent_sub=aes1.consecutivo)
			       WHERE aess1.numero_solicitud=sol.numero_solicitud
			       	AND aes1.estado= :estadoAutorizacionAutorizado))
			UNION
			(-- Consulta de Cargos Directos de Cirugia
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
				   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (sol.fecha_solicitud >= :fechaInicio
		              AND sol.fecha_solicitud <= :fechaFin)
				  AND sol.tipo = :tipoSolicitudCirugia
				  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
				  AND scps.cubierto = :cubierto
				  AND scps.contrato_convenio = :codigoContrato
				  AND solp.fecha_posponer IS NULL
				  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM salascirugia.solicitudes_cirugia sc1
				          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
				       WHERE sc1.numero_solicitud=sol.numero_solicitud
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
			UNION
			(-- Consulta de Solicitudes de Medicamentos
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (sol.fecha_solicitud >= :fechaInicio
		              AND sol.fecha_solicitud <= :fechaFin) 
				  AND sol.tipo = :tipoSolicitudMedicamento
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  AND solp.fecha_posponer IS NULL
				  --Se valida que el numero de articulos cubiertos por el convenio capitado sea mayor
				  --al número de articulos autorizados
				  --o que si tiene autorización esta este ANULADA
				  AND ((SELECT COUNT(0) 
				       FROM ordenes.solicitudes sol1
				          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
				       WHERE detc1.solicitud=sol.numero_solicitud
				          AND detc1.cubierto = :cubierto
						  AND detc1.contrato = :codigoContrato)
				  	 >
				  	(SELECT COUNT(0) 
				       FROM ordenes.solicitudes_medicamentos sm1
				          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
				          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
				       WHERE sm1.numero_solicitud=sol.numero_solicitud
				        AND aes1.estado= :estadoAutorizacionAutorizado)
				     )
				      )
			UNION
			(-- Consulta de Solicitudes de Cirugia
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
				   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (sol.fecha_solicitud >= :fechaInicio
		              AND sol.fecha_solicitud <= :fechaFin)
				  AND sol.tipo = :tipoSolicitudCirugia
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  AND scps.cubierto = :cubierto
				  AND scps.contrato_convenio = :codigoContrato
				  AND solp.fecha_posponer IS NULL
				  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM salascirugia.solicitudes_cirugia sc1
				          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
				       WHERE sc1.numero_solicitud=sol.numero_solicitud
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
			UNION
			(-- Consulta de Solicitudes de Procedimientos
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (sol.fecha_solicitud >= :fechaInicio
		              AND sol.fecha_solicitud <= :fechaFin) 
				  AND sol.tipo = :tipoSolicitudProcedimiento
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  AND solp.fecha_posponer IS NULL
		      	  --Se valida que exista por lo menos un procedimiento que corresponda al
		          --contrato que llega por parámetro y que se encuentre cubierto
				  AND (SELECT COUNT(0)
				       FROM facturacion.det_cargos detc1
		          WHERE detc1.solicitud=sol.numero_solicitud 
				        AND detc1.cubierto = :cubierto
				        AND detc1.contrato = :codigoContrato) > 0 
				  --Se valida que exista por lo menos un procedimiento sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.sol_procedimientos sp2
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=sp2.auto_ent_sub)
				       WHERE sp2.numero_solicitud=sol.numero_solicitud
				        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
				      )       
			UNION
			(-- Consulta de Solicitudes de InterConsultas
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (sol.fecha_solicitud >= :fechaInicio
		              AND sol.fecha_solicitud <= :fechaFin)
				  AND sol.tipo = :tipoSolicitudInterconsulta
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  AND solp.fecha_posponer IS NULL
				  --Se valida que exista por lo menos una interconsulta que corresponda al
		      	  --contrato que llega por parámetro y que se encuentre cubierto
				  AND (SELECT COUNT(0)
					       FROM facturacion.det_cargos detc1
			           WHERE detc1.solicitud=sol.numero_solicitud 
					        AND detc1.cubierto = :cubierto
					        AND detc1.contrato = :codigoContrato) > 0 
				  --Se valida que exista por lo menos una interconsulta sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.solicitudes_inter si2
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=si2.auto_ent_sub)
				       WHERE si2.numero_solicitud=sol.numero_solicitud
				        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
				      )   
			UNION
			(-- Consulta de Solicitudes de Consultas
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (sol.fecha_solicitud >= :fechaInicio
		              AND sol.fecha_solicitud <= :fechaFin)
				  AND sol.tipo = :tipoSolicitudConsulta
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  AND solp.fecha_posponer IS NULL
				  --Se valida que exista por lo menos una consulta que corresponda al
		      	  --contrato que llega por parámetro y que se encuentre cubierto
				  AND (SELECT COUNT(0)
				       FROM facturacion.det_cargos detc1
				       WHERE detc1.solicitud=sol.numero_solicitud 
				        AND detc1.cubierto = :cubierto
				        AND detc1.contrato = :codigoContrato) > 0 
				  --Se valida que exista por lo menos una consulta sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.solicitudes_consulta scon2
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=scon2.auto_ent_sub)
				       WHERE scon2.numero_solicitud=sol.numero_solicitud
				        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
				      )
	      UNION
	      (-- Consulta de Cargos Directos de Articulos Con Registro de Posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
				       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
	        	  INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
				  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual
			  AND sol.tipo = :tipoSolicitudCargoDirectoArticulo
			  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
			  AND detc.estado = :estadoCargoCargado
			  AND detc.cubierto = :cubierto
			  AND detc.contrato = :codigoContrato
			  --Se valida que el numero de articulos cubiertos por el convenio capitado sea mayor
			  --al número de articulos autorizados
			  --o que si tiene autorización esta este ANULADA
			  AND ((SELECT COUNT(0) 
			       FROM ordenes.solicitudes sol1
			          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
			       WHERE detc1.solicitud=sol.numero_solicitud
			          AND detc1.cubierto = :cubierto
					  AND detc1.contrato = :codigoContrato)
			  	 >
			  	(SELECT COUNT(0) 
			       FROM ordenes.solicitudes_medicamentos sm1
			          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
			          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
			       WHERE sm1.numero_solicitud=sol.numero_solicitud
			        AND aes1.estado= :estadoAutorizacionAutorizado)
			     )) 
			UNION
			(-- Consulta de Cargos Directos de Servicios con Registro de Posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
				       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
	        	  INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
				  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual 
				  AND sol.tipo = :tipoSolicitudCargoDirectoServicio
				  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
				  AND detc.estado = :estadoCargoCargado
				  AND detc.cubierto = :cubierto
				  AND detc.contrato = :codigoContrato
		      	  --Se valida que exista la cantidad de servicios del cargo directo
				  --sea menor a la cantidad de servicios autorizados
				  AND (SELECT COUNT(0) 
				       FROM facturacion.det_cargos detc1
				       WHERE detc1.solicitud=sol.numero_solicitud) > 
				      (SELECT COUNT(0) 
				       FROM ordenes.auto_entsub_solicitudes aess1
				          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=aess1.autorizacion_ent_sub)
				          INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv1 ON (aesserv1.autorizacion_ent_sub=aes1.consecutivo)
				       WHERE aess1.numero_solicitud=sol.numero_solicitud
				       	AND aes1.estado= :estadoAutorizacionAutorizado))
			UNION
			(-- Consulta de Cargos Directos de Cirugia con registro de posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
	         	   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
				   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual 
				  AND sol.tipo = :tipoSolicitudCirugia
				  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
				  AND scps.cubierto = :cubierto
				  AND scps.contrato_convenio = :codigoContrato
				  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM salascirugia.solicitudes_cirugia sc1
				          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
				       WHERE sc1.numero_solicitud=sol.numero_solicitud
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
			UNION
			(-- Consulta de Solicitudes de Medicamentos con Registro de Posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
	         	   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual 
				  AND sol.tipo = :tipoSolicitudMedicamento
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  --Se valida que el numero de articulos cubiertos por el convenio capitado sea mayor
				  --al número de articulos autorizados
				  --o que si tiene autorización esta este ANULADA
				  AND ((SELECT COUNT(0) 
				       FROM ordenes.solicitudes sol1
				          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
				       WHERE detc1.solicitud=sol.numero_solicitud
				          AND detc1.cubierto = :cubierto
						  AND detc1.contrato = :codigoContrato)
				  	 >
				  	(SELECT COUNT(0) 
				       FROM ordenes.solicitudes_medicamentos sm1
				          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
				          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
				       WHERE sm1.numero_solicitud=sol.numero_solicitud
				        AND aes1.estado= :estadoAutorizacionAutorizado)
				     ))
			UNION
			(-- Consulta de Solicitudes de Cirugia con Registro de Posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	         	   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
				   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual
				  AND sol.tipo = :tipoSolicitudCirugia
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  AND scps.cubierto = :cubierto
				  AND scps.contrato_convenio = :codigoContrato
				  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM salascirugia.solicitudes_cirugia sc1
				          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
				       WHERE sc1.numero_solicitud=sol.numero_solicitud
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
			UNION
			(-- Consulta de Solicitudes de Procedimientos con Registro de Posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	         	   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual 
				  AND sol.tipo = :tipoSolicitudProcedimiento
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
		      	  --Se valida que exista por lo menos un procedimiento que corresponda al
		          --contrato que llega por parámetro y que se encuentre cubierto
				  AND (SELECT COUNT(0)
				       FROM facturacion.det_cargos detc1
		          WHERE detc1.solicitud=sol.numero_solicitud 
				        AND detc1.cubierto = :cubierto
				        AND detc1.contrato = :codigoContrato) > 0 
				  --Se valida que exista por lo menos un procedimiento sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.sol_procedimientos sp2
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=sp2.auto_ent_sub)
				       WHERE sp2.numero_solicitud=sol.numero_solicitud
				        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
				      )       
			UNION
			(-- Consulta de Solicitudes de InterConsultas con Registro de Posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	         	   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual 
				  AND sol.tipo = :tipoSolicitudInterconsulta
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  --Se valida que exista por lo menos una interconsulta que corresponda al
		      	  --contrato que llega por parámetro y que se encuentre cubierto
				  AND (SELECT COUNT(0)
				       FROM facturacion.det_cargos detc1
		           WHERE detc1.solicitud=sol.numero_solicitud 
				        AND detc1.cubierto = :cubierto
				        AND detc1.contrato = :codigoContrato) > 0 
				  --Se valida que exista por lo menos una interconsulta sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.solicitudes_inter si2
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=si2.auto_ent_sub)
				       WHERE si2.numero_solicitud=sol.numero_solicitud
				        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
				      )   
			UNION
			(-- Consulta de Solicitudes de Consultas con Registro de Posponer
			SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
				       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
				       sol.fecha_solicitud AS fechaOrden, 
				       CASE WHEN sol.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
				       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
				       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
				       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.solicitudes sol
				   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	         	   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
				   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
				   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE solp.fecha_posponer <= :fechaActual
				  AND sol.tipo = :tipoSolicitudConsulta
				  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
				  --Se valida que exista por lo menos una consulta que corresponda al
		      	  --contrato que llega por parámetro y que se encuentre cubierto
				  AND (SELECT COUNT(0)
				       FROM facturacion.det_cargos detc1
				       WHERE detc1.solicitud=sol.numero_solicitud 
				        AND detc1.cubierto = :cubierto
				        AND detc1.contrato = :codigoContrato) > 0 
				  --Se valida que exista por lo menos una consulta sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.solicitudes_consulta scon2
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=scon2.auto_ent_sub)
				       WHERE scon2.numero_solicitud=sol.numero_solicitud
				        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
				      )) ordenesPorAutorizar
			ORDER BY ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.numeroIdPaciente
		]]>
 	</sql-query>
 	
 	<sql-query name="autorizacionCapitacion.obtenerOrdenesMedicasPorAutorizarPorNivel">
	 	<return-scalar column="codigoOrden" type="long" />
		<return-scalar column="consecutivoOrden" type="string" />
		<return-scalar column="tipoOrden" type="integer" />
		<return-scalar column="claseOrden" type="integer" />
		<return-scalar column="fechaOrden" type="date" />
		<return-scalar column="urgenteOrden" type="string" />
		<return-scalar column="codigoCCEjecuta" type="integer" />
		<return-scalar column="nombreCCEjecuta" type="string" />
		<return-scalar column="codigoIngreso" type="integer" />
		<return-scalar column="consecutivoIngreso" type="string" />
		<return-scalar column="fechaPosponer" type="date" />
		<return-scalar column="pyp" type="string" />
		<return-scalar column="codigoPaciente" type="integer"/>
		<return-scalar column="tipoIdPaciente" type="string" />
		<return-scalar column="numeroIdPaciente" type="string" />
		<return-scalar column="primerNombrePaciente" type="string" />
		<return-scalar column="segundoNombrePaciente" type="string" />
		<return-scalar column="primerApellidoPaciente" type="string" />
		<return-scalar column="segundoApellidoPaciente" type="string" />
		<![CDATA[
			SELECT DISTINCT ordenesPorAutorizar.codigoOrden, ordenesPorAutorizar.consecutivoOrden, ordenesPorAutorizar.tipoOrden,
		       ordenesPorAutorizar.claseOrden, ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.urgenteOrden, 
		       ordenesPorAutorizar.codigoCCEjecuta, ordenesPorAutorizar.nombreCCEjecuta, ordenesPorAutorizar.codigoIngreso, 
		       ordenesPorAutorizar.consecutivoIngreso, ordenesPorAutorizar.fechaPosponer, ordenesPorAutorizar.pyp, ordenesPorAutorizar.codigoPaciente,
		       ordenesPorAutorizar.tipoIdPaciente, ordenesPorAutorizar.numeroIdPaciente, ordenesPorAutorizar.primerNombrePaciente,
		       ordenesPorAutorizar.segundoNombrePaciente, ordenesPorAutorizar.primerApellidoPaciente, ordenesPorAutorizar.segundoApellidoPaciente
			FROM 
				((-- Consulta de Cargos Directos de Articulos
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
					       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	                  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
					  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					  LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudCargoDirectoArticulo
					  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
					  AND detc.estado = :estadoCargoCargado
					  AND detc.cubierto = :cubierto
					  AND detc.contrato = :codigoContrato
					  AND solp.fecha_posponer IS NULL
					  --Se valida que el numero de articulos cubiertos por el convenio capitado que tienen el nivel sea mayor
					  --al número de articulos autorizados que tienen el nivel
					  --o que si tiene autorización esta este ANULADA
					  AND ((SELECT COUNT(0) 
					       FROM ordenes.solicitudes sol1
					          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
					          INNER JOIN inventarios.articulo art1 ON (art1.codigo=detc1.articulo)
					       WHERE detc1.solicitud=sol.numero_solicitud
					          AND detc1.cubierto = :cubierto
							  AND detc1.contrato = :codigoContrato
							  AND art1.nivel_atencion = :codigoNivelAtencion)
					  	 >
					  	(SELECT COUNT(0) 
					       FROM ordenes.solicitudes_medicamentos sm1
					          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
					          INNER JOIN inventarios.articulo art2 ON (art2.codigo=ds1.articulo)
					          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
					       WHERE sm1.numero_solicitud=sol.numero_solicitud
					        AND aes1.estado= :estadoAutorizacionAutorizado
					        AND art2.nivel_atencion = :codigoNivelAtencion)
					     )) 
				UNION
				(-- Consulta de Cargos Directos de Servicios
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
					       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	                  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
					  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					  LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudCargoDirectoServicio
					  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
					  AND detc.estado = :estadoCargoCargado
					  AND detc.cubierto = :cubierto
					  AND detc.contrato = :codigoContrato
					  AND solp.fecha_posponer IS NULL
			      	  --Se valida que exista la cantidad de servicios del cargo directo que tienen
			      	  --asociado el nivel de atención que llega por parámetro
					  --sea menor a la cantidad de servicios autorizados
					  AND (SELECT COUNT(0) 
					       FROM facturacion.det_cargos detc1
			              	INNER JOIN facturacion.servicios serv1 ON (serv1.codigo=detc1.servicio) 
					       WHERE detc1.solicitud=sol.numero_solicitud
			            AND serv1.nivel = :codigoNivelAtencion) > 
					      (SELECT COUNT(0) 
					       FROM ordenes.auto_entsub_solicitudes aess1
					          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=aess1.autorizacion_ent_sub)
					          INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv1 ON (aesserv1.autorizacion_ent_sub=aes1.consecutivo)
					       WHERE aess1.numero_solicitud=sol.numero_solicitud
					       	AND aes1.estado= :estadoAutorizacionAutorizado))
				UNION
				(-- Consulta de Cargos Directos de Cirugia
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	                   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente) 
					   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
					   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudCirugia
					  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
					  AND scps.cubierto = :cubierto
					  AND scps.contrato_convenio = :codigoContrato
					  AND solp.fecha_posponer IS NULL
					  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			     	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM salascirugia.solicitudes_cirugia sc1
					          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
			              INNER JOIN facturacion.servicios serv1 ON (serv1.codigo=scps1.servicio)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
					       WHERE sc1.numero_solicitud=sol.numero_solicitud
			            AND serv1.nivel = :codigoNivelAtencion
					        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
					      ) > 0)
				UNION
				(-- Consulta de Solicitudes de Medicamentos
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	           		   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudMedicamento
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  AND solp.fecha_posponer IS NULL
					  --Se valida que el numero de articulos cubiertos por el convenio capitado que tienen el nivel sea mayor
					  --al número de articulos autorizados que tienen el nivel
					  --o que si tiene autorización esta este ANULADA
					  AND ((SELECT COUNT(0) 
					       FROM ordenes.solicitudes sol1
					          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
					          INNER JOIN inventarios.articulo art1 ON (art1.codigo=detc1.articulo)
					       WHERE detc1.solicitud=sol.numero_solicitud
					          AND detc1.cubierto = :cubierto
							  AND detc1.contrato = :codigoContrato
							  AND art1.nivel_atencion = :codigoNivelAtencion)
					  	 >
					  	(SELECT COUNT(0) 
					       FROM ordenes.solicitudes_medicamentos sm1
					          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
					          INNER JOIN inventarios.articulo art2 ON (art2.codigo=ds1.articulo)
					          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
					       WHERE sm1.numero_solicitud=sol.numero_solicitud
					        AND aes1.estado= :estadoAutorizacionAutorizado
					        AND art2.nivel_atencion = :codigoNivelAtencion)
					     ))
				UNION
				(-- Consulta de Solicitudes de Cirugia
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	           		   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
					   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudCirugia
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  AND scps.cubierto = :cubierto
					  AND scps.contrato_convenio = :codigoContrato
					  AND solp.fecha_posponer IS NULL
					  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			    	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM salascirugia.solicitudes_cirugia sc1
					          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
			              INNER JOIN facturacion.servicios serv1 ON (serv1.codigo=scps1.servicio)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
					       WHERE sc1.numero_solicitud=sol.numero_solicitud
			            AND serv1.nivel = :codigoNivelAtencion
					        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
					      ) > 0)
				UNION
				(-- Consulta de Solicitudes de Procedimientos
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				       INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudProcedimiento
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  AND solp.fecha_posponer IS NULL
			      --Se valida que exista por lo menos un procedimiento que corresponda al
			      --contrato que llega por parámetro y que se encuentre cubierto
					  AND (SELECT COUNT(0)
					       FROM facturacion.det_cargos detc1
			          WHERE detc1.solicitud=sol.numero_solicitud 
					        AND detc1.cubierto = :cubierto
					        AND detc1.contrato = :codigoContrato) > 0 
					  --Se valida que exista por lo menos un procedimiento sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			      	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM ordenes.sol_procedimientos sp2
			              INNER JOIN facturacion.servicios serv2 ON (serv2.codigo=sp2.codigo_servicio_solicitado)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=sp2.auto_ent_sub)
					       WHERE sp2.numero_solicitud=sol.numero_solicitud
			            AND serv2.nivel = :codigoNivelAtencion
					        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
					      )       
				UNION
				(-- Consulta de Solicitudes de InterConsultas
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				       INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudInterconsulta
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  AND solp.fecha_posponer IS NULL
					  --Se valida que exista por lo menos una interconsulta que corresponda al
			     	  --contrato que llega por parámetro y que se encuentre cubierto
					  AND (SELECT COUNT(0)
					       FROM facturacion.det_cargos detc1
			           WHERE detc1.solicitud=sol.numero_solicitud 
					        AND detc1.cubierto = :cubierto
					        AND detc1.contrato = :codigoContrato) > 0 
					  --Se valida que exista por lo menos una interconsulta sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			   		  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM ordenes.solicitudes_inter si2
			              INNER JOIN facturacion.servicios serv2 ON (serv2.codigo=si2.codigo_servicio_solicitado)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=si2.auto_ent_sub)
					       WHERE si2.numero_solicitud=sol.numero_solicitud
			            AND serv2.nivel = :codigoNivelAtencion
					        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
					      )   
				UNION
				(-- Consulta de Solicitudes de Consultas
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				       INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
					   LEFT JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
				--Se obtienen las ordenes de acuerdo al rango de fechas
			    WHERE (sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin)
					  AND sol.tipo = :tipoSolicitudConsulta
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  AND solp.fecha_posponer IS NULL
					  --Se valida que exista por lo menos una consulta que corresponda al
			     	  --contrato que llega por parámetro y que se encuentre cubierto
					  AND (SELECT COUNT(0)
					       FROM facturacion.det_cargos detc1
					       WHERE detc1.solicitud=sol.numero_solicitud 
					        AND detc1.cubierto = :cubierto
					        AND detc1.contrato = :codigoContrato) > 0 
					  --Se valida que exista por lo menos una consulta sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			     	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM ordenes.solicitudes_consulta scon2
			              INNER JOIN facturacion.servicios serv2 ON (serv2.codigo=scon2.codigo_servicio_solicitado)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=scon2.auto_ent_sub)
					       WHERE scon2.numero_solicitud=sol.numero_solicitud
			            AND serv2.nivel = :codigoNivelAtencion
					        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
					      )
		        UNION
		        (-- Consulta de Cargos Directos de Articulos con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
					       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
						FROM ordenes.solicitudes sol
						  INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
		          		  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
						  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
						  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
		          		  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
						  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
						  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				--Se obtienen las ordenes que tengan registro de posponer
			    WHERE solp.fecha_posponer <= :fechaActual
					  AND sol.tipo = :tipoSolicitudCargoDirectoArticulo
					  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
					  AND detc.estado = :estadoCargoCargado
					  AND detc.cubierto = :cubierto
					  AND detc.contrato = :codigoContrato
					  --Se valida que el numero de articulos cubiertos por el convenio capitado que tienen el nivel sea mayor
					  --al número de articulos autorizados que tienen el nivel
					  --o que si tiene autorización esta este ANULADA
					  AND ((SELECT COUNT(0) 
					       FROM ordenes.solicitudes sol1
					          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
					          INNER JOIN inventarios.articulo art1 ON (art1.codigo=detc1.articulo)
					       WHERE detc1.solicitud=sol.numero_solicitud
					          AND detc1.cubierto = :cubierto
							  AND detc1.contrato = :codigoContrato
							  AND art1.nivel_atencion = :codigoNivelAtencion)
					  	 >
					  	(SELECT COUNT(0) 
					       FROM ordenes.solicitudes_medicamentos sm1
					          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
					          INNER JOIN inventarios.articulo art2 ON (art2.codigo=ds1.articulo)
					          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
					       WHERE sm1.numero_solicitud=sol.numero_solicitud
					        AND aes1.estado= :estadoAutorizacionAutorizado
					        AND art2.nivel_atencion = :codigoNivelAtencion)
					     )) 
				UNION
				(-- Consulta de Cargos Directos de Servicios con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden, 
					       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					  INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	          		  INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					  INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	             	  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					  INNER JOIN facturacion.det_cargos detc ON (detc.solicitud=sol.numero_solicitud)
					  INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				  --Se obtienen las ordenes que tengan registro de posponer
			    WHERE solp.fecha_posponer <= :fechaActual 
					  AND sol.tipo = :tipoSolicitudCargoDirectoServicio
					  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
					  AND detc.estado = :estadoCargoCargado
					  AND detc.cubierto = :cubierto
					  AND detc.contrato = :codigoContrato
			      	  --Se valida que exista la cantidad de servicios del cargo directo que tienen
			      	  --asociado el nivel de atención que llega por parámetro
					  --sea menor a la cantidad de servicios autorizados
					  AND (SELECT COUNT(0) 
					       FROM facturacion.det_cargos detc1
			              	INNER JOIN facturacion.servicios serv1 ON (serv1.codigo=detc1.servicio) 
					       WHERE detc1.solicitud=sol.numero_solicitud
			            AND serv1.nivel = :codigoNivelAtencion) > 
					      (SELECT COUNT(0) 
					       FROM ordenes.auto_entsub_solicitudes aess1
					          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=aess1.autorizacion_ent_sub)
					          INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv1 ON (aesserv1.autorizacion_ent_sub=aes1.consecutivo)
					       WHERE aess1.numero_solicitud=sol.numero_solicitud
					       	AND aes1.estado= :estadoAutorizacionAutorizado))
				UNION
				(-- Consulta de Cargos Directos de Cirugia con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :cargoDirecto AS claseOrden,
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	           		   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				       INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente) 
					   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
					   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				--Se obtienen las ordenes que tengan registro de posponer
			    WHERE solp.fecha_posponer <= :fechaActual 
					  AND sol.tipo = :tipoSolicitudCirugia
					  AND sol.estado_historia_clinica = :estadoSolHCCargoDirecto
					  AND scps.cubierto = :cubierto
					  AND scps.contrato_convenio = :codigoContrato
					  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			     	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM salascirugia.solicitudes_cirugia sc1
					          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
			              INNER JOIN facturacion.servicios serv1 ON (serv1.codigo=scps1.servicio)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
					       WHERE sc1.numero_solicitud=sol.numero_solicitud
			            AND serv1.nivel = :codigoNivelAtencion
					        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
					      ) > 0)
				UNION
				(-- Consulta de Solicitudes de Medicamentos con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	           		   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	           		   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				--Se obtienen las ordenes que tengan registro de posponer
			    WHERE solp.fecha_posponer <= :fechaActual 
					  AND sol.tipo = :tipoSolicitudMedicamento
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  --Se valida que el numero de articulos cubiertos por el convenio capitado que tienen el nivel sea mayor
					  --al número de articulos autorizados que tienen el nivel
					  --o que si tiene autorización esta este ANULADA
					  AND ((SELECT COUNT(0) 
					       FROM ordenes.solicitudes sol1
					          INNER JOIN facturacion.det_cargos detc1 ON (detc1.solicitud=sol1.numero_solicitud)
					          INNER JOIN inventarios.articulo art1 ON (art1.codigo=detc1.articulo)
					       WHERE detc1.solicitud=sol.numero_solicitud
					          AND detc1.cubierto = :cubierto
							  AND detc1.contrato = :codigoContrato
							  AND art1.nivel_atencion = :codigoNivelAtencion)
					  	 >
					  	(SELECT COUNT(0) 
					       FROM ordenes.solicitudes_medicamentos sm1
					          INNER JOIN ordenes.detalle_solicitudes ds1 ON (ds1.numero_solicitud=sm1.numero_solicitud)
					          INNER JOIN inventarios.articulo art2 ON (art2.codigo=ds1.articulo)
					          INNER JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ds1.auto_ent_sub)
					       WHERE sm1.numero_solicitud=sol.numero_solicitud
					        AND aes1.estado= :estadoAutorizacionAutorizado
					        AND art2.nivel_atencion = :codigoNivelAtencion)
					     ))
				UNION
				(-- Consulta de Solicitudes de Cirugia con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	           		   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
	           		   INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN salascirugia.solicitudes_cirugia sc ON (sc.numero_solicitud=sol.numero_solicitud)
					   INNER JOIN salascirugia.sol_cirugia_por_servicio scps ON (scps.numero_solicitud=sc.numero_solicitud)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				--Se obtienen las ordenes que tengan registro de posponer
			    WHERE solp.fecha_posponer <= :fechaActual 
					  AND sol.tipo = :tipoSolicitudCirugia
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  AND scps.cubierto = :cubierto
					  AND scps.contrato_convenio = :codigoContrato
					  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			    	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM salascirugia.solicitudes_cirugia sc1
					          INNER JOIN salascirugia.sol_cirugia_por_servicio scps1 ON (scps1.numero_solicitud=sc1.numero_solicitud)
			              INNER JOIN facturacion.servicios serv1 ON (serv1.codigo=scps1.servicio)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=scps1.auto_ent_sub)
					       WHERE sc1.numero_solicitud=sol.numero_solicitud
			            AND serv1.nivel = :codigoNivelAtencion
					        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
					      ) > 0)
				UNION
				(-- Consulta de Solicitudes de Procedimientos con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	           		   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				       INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				--Se obtienen las ordenes que tengan registro de posponer
			    WHERE solp.fecha_posponer <= :fechaActual 
					  AND sol.tipo = :tipoSolicitudProcedimiento
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
			      --Se valida que exista por lo menos un procedimiento que corresponda al
			      --contrato que llega por parámetro y que se encuentre cubierto
					  AND (SELECT COUNT(0)
					       FROM facturacion.det_cargos detc1
			          WHERE detc1.solicitud=sol.numero_solicitud 
					        AND detc1.cubierto = :cubierto
					        AND detc1.contrato = :codigoContrato) > 0 
					  --Se valida que exista por lo menos un procedimiento sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			      	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM ordenes.sol_procedimientos sp2
			              INNER JOIN facturacion.servicios serv2 ON (serv2.codigo=sp2.codigo_servicio_solicitado)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=sp2.auto_ent_sub)
					       WHERE sp2.numero_solicitud=sol.numero_solicitud
			            AND serv2.nivel = :codigoNivelAtencion
					        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
					      )       
				UNION
				(-- Consulta de Solicitudes de InterConsultas con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	           		   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				       INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				--Se obtienen las ordenes que tengan registro de posponer
			    WHERE solp.fecha_posponer <= :fechaActual 
					  AND sol.tipo = :tipoSolicitudInterconsulta
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  --Se valida que exista por lo menos una interconsulta que corresponda al
			     	  --contrato que llega por parámetro y que se encuentre cubierto
					  AND (SELECT COUNT(0)
					       FROM facturacion.det_cargos detc1
			           WHERE detc1.solicitud=sol.numero_solicitud 
					        AND detc1.cubierto = :cubierto
					        AND detc1.contrato = :codigoContrato) > 0 
					  --Se valida que exista por lo menos una interconsulta sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			   		  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM ordenes.solicitudes_inter si2
			              INNER JOIN facturacion.servicios serv2 ON (serv2.codigo=si2.codigo_servicio_solicitado)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=si2.auto_ent_sub)
					       WHERE si2.numero_solicitud=sol.numero_solicitud
			            AND serv2.nivel = :codigoNivelAtencion
					        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
					      )   
				UNION
				(-- Consulta de Solicitudes de Consultas con Registro de Posponer
				SELECT DISTINCT sol.numero_solicitud AS codigoOrden, sol.consecutivo_ordenes_medicas||'' AS consecutivoOrden,
					       sol.tipo AS tipoOrden, :ordenMedica AS claseOrden, 
					       sol.fecha_solicitud AS fechaOrden, 
					       CASE WHEN sol.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, cc.codigo AS codigoCCEjecuta, 
					       cc.nombre AS nombreCCEjecuta, ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, 
					       solp.fecha_posponer AS fechaPosponer, CASE WHEN sol.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp,
					       pers.codigo AS codigoPaciente, pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM ordenes.solicitudes sol
					   INNER JOIN ordenes.solicitudes_posponer solp ON (solp.solicitud=sol.numero_solicitud)
	           		   INNER JOIN manejopaciente.cuentas cue ON (cue.id=sol.cuenta)
					   INNER JOIN manejopaciente.ingresos ing ON (ing.id=cue.id_ingreso)
					   INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				       INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					   INNER JOIN administracion.centros_costo cc ON (cc.codigo=sol.centro_costo_solicitado)
				--Se obtienen las ordenes que tengan registro de posponer
			    WHERE ((sol.fecha_solicitud >= :fechaInicio
			              AND sol.fecha_solicitud <= :fechaFin) OR solp.fecha_posponer <= :fechaActual)
					  AND sol.tipo = :tipoSolicitudConsulta
					  AND sol.estado_historia_clinica = :estadoSolHCSolicitada
					  --Se valida que exista por lo menos una consulta que corresponda al
			     	  --contrato que llega por parámetro y que se encuentre cubierto
					  AND (SELECT COUNT(0)
					       FROM facturacion.det_cargos detc1
					       WHERE detc1.solicitud=sol.numero_solicitud 
					        AND detc1.cubierto = :cubierto
					        AND detc1.contrato = :codigoContrato) > 0 
					  --Se valida que exista por lo menos una consulta sin autorizar
					  --o que si tiene autorización esta se encuentre ANULADA y que corresponda
			     	  --al nivel de atención que llega por parámetro
					  AND (SELECT COUNT(0) 
					       FROM ordenes.solicitudes_consulta scon2
			              INNER JOIN facturacion.servicios serv2 ON (serv2.codigo=scon2.codigo_servicio_solicitado)
					          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes2 ON (aes2.consecutivo=scon2.auto_ent_sub)
					       WHERE scon2.numero_solicitud=sol.numero_solicitud
			            AND serv2.nivel = :codigoNivelAtencion
					        AND (aes2.consecutivo IS NULL OR aes2.estado= :estadoAutorizacionAnulada)) > 0
					      )) ordenesPorAutorizar
				ORDER BY ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.numeroIdPaciente
		]]>
 	</sql-query>
 	
 	<sql-query name="autorizacionCapitacion.obtenerOrdenesAmbulatoriasPorAutorizar">
	 	<return-scalar column="codigoOrden" type="long" />
		<return-scalar column="consecutivoOrden" type="string" />
		<return-scalar column="tipoOrden" type="integer" />
		<return-scalar column="claseOrden" type="integer" />
		<return-scalar column="fechaOrden" type="date" />
		<return-scalar column="urgenteOrden" type="string" />
		<return-scalar column="codigoCCEjecuta" type="integer" />
		<return-scalar column="nombreCCEjecuta" type="string" />
		<return-scalar column="codigoIngreso" type="integer" />
		<return-scalar column="consecutivoIngreso" type="string" />
		<return-scalar column="fechaPosponer" type="date" />
		<return-scalar column="pyp" type="string" />
		<return-scalar column="codigoPaciente" type="integer"/>
		<return-scalar column="tipoIdPaciente" type="string" />
		<return-scalar column="numeroIdPaciente" type="string" />
		<return-scalar column="primerNombrePaciente" type="string" />
		<return-scalar column="segundoNombrePaciente" type="string" />
		<return-scalar column="primerApellidoPaciente" type="string" />
		<return-scalar column="segundoApellidoPaciente" type="string" />
		<![CDATA[
			SELECT DISTINCT ordenesPorAutorizar.codigoOrden, ordenesPorAutorizar.consecutivoOrden, ordenesPorAutorizar.tipoOrden,
		       ordenesPorAutorizar.claseOrden, ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.urgenteOrden, 
		       ordenesPorAutorizar.codigoCCEjecuta, ordenesPorAutorizar.nombreCCEjecuta, ordenesPorAutorizar.codigoIngreso, 
		       ordenesPorAutorizar.consecutivoIngreso, ordenesPorAutorizar.fechaPosponer, ordenesPorAutorizar.pyp, ordenesPorAutorizar.codigoPaciente,
		       ordenesPorAutorizar.tipoIdPaciente, ordenesPorAutorizar.numeroIdPaciente, ordenesPorAutorizar.primerNombrePaciente,
		       ordenesPorAutorizar.segundoNombrePaciente, ordenesPorAutorizar.primerApellidoPaciente, ordenesPorAutorizar.segundoApellidoPaciente
			FROM 
			((-- Consulta de Ordenes Ambulatorias de Articulos
			SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
				       :ordenAmbulatoria AS claseOrden,
				       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
				       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
				       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
				       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.ordenes_ambulatorias oa
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso) 
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN ordenes.det_orden_amb_articulo doaa ON (doaa.codigo_orden=oa.codigo)
				  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
				  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
				  LEFT JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (oa.fecha >= :fechaInicio
					              AND oa.fecha <= :fechaFin)
				  AND oa.tipo_orden = :tipoOrdenAmbArticulo
				  AND oa.estado= :estadoOrdenAmbPendiente
				  AND doaa.cubierto = :cubierto
				  AND doaa.contrato_convenio = :codigoContrato
				  AND oap.fecha_posponer IS NULL
				  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
				  --Se valida que exista por lo menos un articulo sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.det_orden_amb_articulo doaa1
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doaa1.auto_ent_sub)
				       WHERE doaa1.codigo_orden=oa.codigo
				        AND doaa1.cubierto = :cubierto
				        AND doaa1.contrato_convenio = :codigoContrato
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
			UNION
			(-- Consulta de Ordenes Ambulatorias de Servicios
			SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
				       :ordenAmbulatoria AS claseOrden, 
				       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
				       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
				       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
				       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.ordenes_ambulatorias oa
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN ordenes.det_orden_amb_servicio doas ON (doas.codigo_orden=oa.codigo)
				  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
				  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
				  LEFT JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (oa.fecha >= :fechaInicio
					              AND oa.fecha <= :fechaFin)
				  AND oa.tipo_orden = :tipoOrdenAmbServicio
				  AND oa.estado= :estadoOrdenAmbPendiente
				  AND doas.cubierto = :cubierto
		      	  AND doas.contrato_convenio = :codigoContrato
		      	  AND oap.fecha_posponer IS NULL
				  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
				  --Se valida que exista por lo menos un servicio sin autorizar
				  --o que si tiene autorización esta este ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.det_orden_amb_servicio doas1
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doas1.auto_ent_sub)
				       WHERE doas1.codigo_orden=oa.codigo
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
      UNION
      (-- Consulta de Ordenes Ambulatorias de Articulos con Registro de Posponer
			SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
				       :ordenAmbulatoria AS claseOrden,
				       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
				       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
				       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
				       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.ordenes_ambulatorias oa
	        	  INNER JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso) 
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN ordenes.det_orden_amb_articulo doaa ON (doaa.codigo_orden=oa.codigo)
				  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
				  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE oap.fecha_posponer <= :fechaActual
				  AND oa.tipo_orden = :tipoOrdenAmbArticulo
				  AND oa.estado= :estadoOrdenAmbPendiente
				  AND doaa.cubierto = :cubierto
				  AND doaa.contrato_convenio = :codigoContrato
				  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
				  --Se valida que exista por lo menos un articulo sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.det_orden_amb_articulo doaa1
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doaa1.auto_ent_sub)
				       WHERE doaa1.codigo_orden=oa.codigo
				        AND doaa1.cubierto = :cubierto
				        AND doaa1.contrato_convenio = :codigoContrato
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
			UNION
			(-- Consulta de Ordenes Ambulatorias de Servicios con Registro de Posponer
			SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
				       :ordenAmbulatoria AS claseOrden, 
				       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
				       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
				       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
				       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.ordenes_ambulatorias oa
				  INNER JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
	        	  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN ordenes.det_orden_amb_servicio doas ON (doas.codigo_orden=oa.codigo)
				  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
				  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
			--Se obtienen las ordenes que tengan registro de posponer
		    WHERE oap.fecha_posponer <= :fechaActual
				  AND oa.tipo_orden = :tipoOrdenAmbServicio
				  AND oa.estado= :estadoOrdenAmbPendiente
				  AND doas.cubierto = :cubierto
		      AND doas.contrato_convenio = :codigoContrato
				  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
				  --Se valida que exista por lo menos un servicio sin autorizar
				  --o que si tiene autorización esta este ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.det_orden_amb_servicio doas1
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doas1.auto_ent_sub)
				       WHERE doas1.codigo_orden=oa.codigo
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)) ordenesPorAutorizar
			ORDER BY ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.numeroIdPaciente
		]]>
 	</sql-query>
 	
 	<sql-query name="autorizacionCapitacion.obtenerOrdenesAmbulatoriasPorAutorizarPorNivel">
	 	<return-scalar column="codigoOrden" type="long" />
		<return-scalar column="consecutivoOrden" type="string" />
		<return-scalar column="tipoOrden" type="integer" />
		<return-scalar column="claseOrden" type="integer" />
		<return-scalar column="fechaOrden" type="date" />
		<return-scalar column="urgenteOrden" type="string" />
		<return-scalar column="codigoCCEjecuta" type="integer" />
		<return-scalar column="nombreCCEjecuta" type="string" />
		<return-scalar column="codigoIngreso" type="integer" />
		<return-scalar column="consecutivoIngreso" type="string" />
		<return-scalar column="fechaPosponer" type="date" />
		<return-scalar column="pyp" type="string" />
		<return-scalar column="codigoPaciente" type="integer" />
		<return-scalar column="tipoIdPaciente" type="string" />
		<return-scalar column="numeroIdPaciente" type="string" />
		<return-scalar column="primerNombrePaciente" type="string" />
		<return-scalar column="segundoNombrePaciente" type="string" />
		<return-scalar column="primerApellidoPaciente" type="string" />
		<return-scalar column="segundoApellidoPaciente" type="string" />
		<![CDATA[
			SELECT DISTINCT ordenesPorAutorizar.codigoOrden, ordenesPorAutorizar.consecutivoOrden, ordenesPorAutorizar.tipoOrden,
		       ordenesPorAutorizar.claseOrden, ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.urgenteOrden, 
		       ordenesPorAutorizar.codigoCCEjecuta, ordenesPorAutorizar.nombreCCEjecuta, ordenesPorAutorizar.codigoIngreso, 
		       ordenesPorAutorizar.consecutivoIngreso, ordenesPorAutorizar.fechaPosponer, ordenesPorAutorizar.pyp, ordenesPorAutorizar.codigoPaciente,
		       ordenesPorAutorizar.tipoIdPaciente, ordenesPorAutorizar.numeroIdPaciente, ordenesPorAutorizar.primerNombrePaciente,
		       ordenesPorAutorizar.segundoNombrePaciente, ordenesPorAutorizar.primerApellidoPaciente, ordenesPorAutorizar.segundoApellidoPaciente
			FROM 
			((-- Consulta de Ordenes Ambulatorias de Articulos
			SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
				       :ordenAmbulatoria AS claseOrden,
				       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
				       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
				       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
				       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.ordenes_ambulatorias oa
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso) 
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN ordenes.det_orden_amb_articulo doaa ON (doaa.codigo_orden=oa.codigo)
	        	  INNER JOIN inventarios.articulo art ON (art.codigo=doaa.articulo)
				  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
				  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
				  LEFT JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (oa.fecha >= :fechaInicio
					              AND oa.fecha <= :fechaFin)
				  AND oa.tipo_orden = :tipoOrdenAmbArticulo
				  AND oa.estado= :estadoOrdenAmbPendiente
				  AND doaa.cubierto = :cubierto
				  AND doaa.contrato_convenio = :codigoContrato
          		  AND art.nivel_atencion = :codigoNivelAtencion
          		  AND oap.fecha_posponer IS NULL
				  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
				  --Se valida que exista por lo menos un articulo sin autorizar
				  --o que si tiene autorización esta se encuentre ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.det_orden_amb_articulo doaa1
				       	  INNER JOIN inventarios.articulo art1 ON (art1.codigo=doaa1.articulo)
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doaa1.auto_ent_sub)
				       WHERE doaa1.codigo_orden=oa.codigo
				        AND doaa1.cubierto = :cubierto
				        AND doaa1.contrato_convenio = :codigoContrato
				        AND art1.nivel_atencion = :codigoNivelAtencion
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
			UNION
			(-- Consulta de Ordenes Ambulatorias de Servicios
			SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
				       :ordenAmbulatoria AS claseOrden, 
				       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
				       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
				       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
				       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM ordenes.ordenes_ambulatorias oa
				  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN ordenes.det_orden_amb_servicio doas ON (doas.codigo_orden=oa.codigo)
	        	  INNER JOIN facturacion.servicios serv ON (serv.codigo=doas.servicio)
				  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
				  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
				  LEFT JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
			--Se obtienen las ordenes de acuerdo al rango de fechas
		    WHERE (oa.fecha >= :fechaInicio
					              AND oa.fecha <= :fechaFin)
				  AND oa.tipo_orden = :tipoOrdenAmbServicio
				  AND oa.estado= :estadoOrdenAmbPendiente
				  AND doas.cubierto = :cubierto
          		  AND doas.contrato_convenio = :codigoContrato
		     	  AND serv.nivel = :codigoNivelAtencion
		     	  AND oap.fecha_posponer IS NULL
				  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
				  --Se valida que exista por lo menos un servicio sin autorizar
				  --o que si tiene autorización esta este ANULADA
				  AND (SELECT COUNT(0) 
				       FROM ordenes.det_orden_amb_servicio doas1
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doas1.auto_ent_sub)
				       WHERE doas1.codigo_orden=oa.codigo
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)
      UNION
      (-- Consulta de Ordenes Ambulatorias de Articulos con Registro de Posponer
		SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
			       :ordenAmbulatoria AS claseOrden,
			       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
			        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
			       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
			       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
			       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
			       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
			       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
			FROM ordenes.ordenes_ambulatorias oa
        	  INNER JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
              INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso) 
			  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
			  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
			  INNER JOIN ordenes.det_orden_amb_articulo doaa ON (doaa.codigo_orden=oa.codigo)
		      INNER JOIN inventarios.articulo art ON (art.codigo=doaa.articulo)
			  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
			  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
			--Se obtienen las ordenes que tengan registro de posponer
	    WHERE oap.fecha_posponer <= :fechaActual
			  AND oa.tipo_orden = :tipoOrdenAmbArticulo
			  AND oa.estado= :estadoOrdenAmbPendiente
			  AND doaa.cubierto = :cubierto
			  AND doaa.contrato_convenio = :codigoContrato
         	  AND art.nivel_atencion = :codigoNivelAtencion
			  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
			  --Se valida que exista por lo menos un articulo sin autorizar
			  --o que si tiene autorización esta se encuentre ANULADA
			  AND (SELECT COUNT(0) 
			       FROM ordenes.det_orden_amb_articulo doaa1
			       	  INNER JOIN inventarios.articulo art1 ON (art1.codigo=doaa1.articulo)
			          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doaa1.auto_ent_sub)
			       WHERE doaa1.codigo_orden=oa.codigo
			        AND doaa1.cubierto = :cubierto
			        AND doaa1.contrato_convenio = :codigoContrato
			        AND art1.nivel_atencion = :codigoNivelAtencion
			        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
			      ) > 0)
	UNION
	(-- Consulta de Ordenes Ambulatorias de Servicios con Registro de Posponer
	SELECT DISTINCT oa.codigo AS codigoOrden, oa.consecutivo_orden AS consecutivoOrden, oa.tipo_orden AS tipoOrden,
		       :ordenAmbulatoria AS claseOrden, 
		       oa.fecha AS fechaOrden, CASE WHEN oa.urgente= :valorTrueConsulta
		        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
		       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, oap.fecha_posponer AS fechaPosponer,
		       CASE WHEN oa.pyp= :valorTrueConsulta THEN 'S' ELSE 'N' END AS pyp, pers.codigo AS codigoPaciente,
		       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
		       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
		       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
			FROM ordenes.ordenes_ambulatorias oa
			  INNER JOIN ordenes.ordenes_ambulatorias_posponer oap ON (oap.orden_ambulatoria=oa.codigo)
        	  INNER JOIN manejopaciente.ingresos ing ON (ing.id=oa.ingreso)
			  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
			  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
			  INNER JOIN ordenes.det_orden_amb_servicio doas ON (doas.codigo_orden=oa.codigo)
        	  INNER JOIN facturacion.servicios serv ON (serv.codigo=doas.servicio)
			  LEFT JOIN ordenes.ordenes_amb_solicitudes oas ON (oas.orden=oa.codigo)
			  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=oas.numero_solicitud)
			--Se obtienen las ordenes que tengan registro de posponer
    WHERE oap.fecha_posponer <= :fechaActual 
		  AND oa.tipo_orden = :tipoOrdenAmbServicio
		  AND oa.estado= :estadoOrdenAmbPendiente
		  AND doas.cubierto = :cubierto
      	  AND doas.contrato_convenio = :codigoContrato
     	  AND serv.nivel = :codigoNivelAtencion
		  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
		  --Se valida que exista por lo menos un servicio sin autorizar
		  --o que si tiene autorización esta este ANULADA
		  AND (SELECT COUNT(0) 
		       FROM ordenes.det_orden_amb_servicio doas1
		          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=doas1.auto_ent_sub)
		       WHERE doas1.codigo_orden=oa.codigo
		        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
		      ) > 0)) ordenesPorAutorizar
			ORDER BY ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.numeroIdPaciente
		]]>
 	</sql-query>
 	
 	
 	<sql-query name="autorizacionCapitacion.obtenerPeticionesQxPorAutorizar">
	 	<return-scalar column="codigoOrden" type="long" />
		<return-scalar column="consecutivoOrden" type="string" />
		<return-scalar column="tipoOrden" type="integer" />
		<return-scalar column="claseOrden" type="integer" />
		<return-scalar column="fechaOrden" type="date" />
		<return-scalar column="urgenteOrden" type="string" />
		<return-scalar column="codigoCCEjecuta" type="integer" />
		<return-scalar column="nombreCCEjecuta" type="string" />
		<return-scalar column="codigoIngreso" type="integer" />
		<return-scalar column="consecutivoIngreso" type="string" />
		<return-scalar column="fechaPosponer" type="date" />
		<return-scalar column="pyp" type="string" />
		<return-scalar column="codigoPaciente" type="integer"/>
		<return-scalar column="tipoIdPaciente" type="string" />
		<return-scalar column="numeroIdPaciente" type="string" />
		<return-scalar column="primerNombrePaciente" type="string" />
		<return-scalar column="segundoNombrePaciente" type="string" />
		<return-scalar column="primerApellidoPaciente" type="string" />
		<return-scalar column="segundoApellidoPaciente" type="string" />
		<![CDATA[
			SELECT DISTINCT ordenesPorAutorizar.codigoOrden, ordenesPorAutorizar.consecutivoOrden, ordenesPorAutorizar.tipoOrden,
		       ordenesPorAutorizar.claseOrden, ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.urgenteOrden, 
		       ordenesPorAutorizar.codigoCCEjecuta, ordenesPorAutorizar.nombreCCEjecuta, ordenesPorAutorizar.codigoIngreso, 
		       ordenesPorAutorizar.consecutivoIngreso, ordenesPorAutorizar.fechaPosponer, ordenesPorAutorizar.pyp, ordenesPorAutorizar.codigoPaciente,
		       ordenesPorAutorizar.tipoIdPaciente, ordenesPorAutorizar.numeroIdPaciente, ordenesPorAutorizar.primerNombrePaciente,
		       ordenesPorAutorizar.segundoNombrePaciente, ordenesPorAutorizar.primerApellidoPaciente, ordenesPorAutorizar.segundoApellidoPaciente
			FROM 
			((--Peticiones Sin Registro de Posponer
		      SELECT DISTINCT pet.codigo AS codigoOrden, pet.codigo||'' AS consecutivoOrden, :tipoOrdenAmbServicio AS tipoOrden,
					       :peticion AS claseOrden, pet.fecha_peticion AS fechaOrden, CASE WHEN pet.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
					       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, pp.fecha_posponer AS fechaPosponer,
					       'N' AS pyp, pers.codigo AS codigoPaciente,
					       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM salascirugia.peticion_qx pet
					  INNER JOIN manejopaciente.ingresos ing ON (ing.id=pet.ingreso)
					  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
					  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					  INNER JOIN salascirugia.peticiones_servicio ps ON (ps.peticion_qx=pet.codigo)
					  LEFT JOIN salascirugia.solicitudes_cirugia sc ON (sc.codigo_peticion=pet.codigo)
					  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=sc.numero_solicitud)
					  LEFT JOIN ordenes.peticiones_posponer pp ON (pp.peticion=pet.codigo)
			WHERE (pet.fecha_peticion >= :fechaInicio
						              AND pet.fecha_peticion <= :fechaFin)
			  AND pet.estado_peticion in (:estadosPeticion)
			  AND ps.cubierto = :cubierto
			  AND ps.contrato_convenio = :codigoContrato
			  AND pp.fecha_posponer IS NULL
			  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
			  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
			  --o que si tiene autorización esta este ANULADA
			  AND (SELECT COUNT(0) 
			       FROM salascirugia.peticiones_servicio ps1
			          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ps1.auto_ent_sub)
			       WHERE ps1.peticion_qx=pet.codigo
			        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
			      ) > 0)
	      UNION 
	      (--Peticiones con Registro de Posponer
	        SELECT DISTINCT pet.codigo AS codigoOrden, pet.codigo||'' AS consecutivoOrden, :tipoOrdenAmbServicio AS tipoOrden,
				       :peticion AS claseOrden, pet.fecha_peticion AS fechaOrden, CASE WHEN pet.urgente= :valorTrueConsulta
				        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
				       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, pp.fecha_posponer AS fechaPosponer,
				       'N' AS pyp, pers.codigo AS codigoPaciente,
				       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
				       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
				       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
				FROM salascirugia.peticion_qx pet
				  INNER JOIN ordenes.peticiones_posponer pp ON (pp.peticion=pet.codigo)
	        	  INNER JOIN manejopaciente.ingresos ing ON (ing.id=pet.ingreso)
				  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
				  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
				  INNER JOIN salascirugia.peticiones_servicio ps ON (ps.peticion_qx=pet.codigo)
				  LEFT JOIN salascirugia.solicitudes_cirugia sc ON (sc.codigo_peticion=pet.codigo)
				  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=sc.numero_solicitud)	  
			WHERE pp.fecha_posponer <= :fechaActual
			  AND pet.estado_peticion in (:estadosPeticion)
			  AND ps.cubierto = :cubierto
			  AND ps.contrato_convenio = :codigoContrato
			  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
			  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
			  --o que si tiene autorización esta este ANULADA
			  AND (SELECT COUNT(0) 
			       FROM salascirugia.peticiones_servicio ps1
			          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ps1.auto_ent_sub)
			       WHERE ps1.peticion_qx=pet.codigo
			        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
			      ) > 0)) ordenesPorAutorizar
			ORDER BY ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.numeroIdPaciente
		]]>
 	</sql-query>
 	
 	<sql-query name="autorizacionCapitacion.obtenerPeticionesQxPorAutorizarPorNivel">
	 	<return-scalar column="codigoOrden" type="long" />
		<return-scalar column="consecutivoOrden" type="string" />
		<return-scalar column="tipoOrden" type="integer" />
		<return-scalar column="claseOrden" type="integer" />
		<return-scalar column="fechaOrden" type="date" />
		<return-scalar column="urgenteOrden" type="string" />
		<return-scalar column="codigoCCEjecuta" type="integer" />
		<return-scalar column="nombreCCEjecuta" type="string" />
		<return-scalar column="codigoIngreso" type="integer" />
		<return-scalar column="consecutivoIngreso" type="string" />
		<return-scalar column="fechaPosponer" type="date" />
		<return-scalar column="pyp" type="string" />
		<return-scalar column="codigoPaciente" type="integer"/>
		<return-scalar column="tipoIdPaciente" type="string" />
		<return-scalar column="numeroIdPaciente" type="string" />
		<return-scalar column="primerNombrePaciente" type="string" />
		<return-scalar column="segundoNombrePaciente" type="string" />
		<return-scalar column="primerApellidoPaciente" type="string" />
		<return-scalar column="segundoApellidoPaciente" type="string" />
		<![CDATA[
			SELECT DISTINCT ordenesPorAutorizar.codigoOrden, ordenesPorAutorizar.consecutivoOrden, ordenesPorAutorizar.tipoOrden,
		       ordenesPorAutorizar.claseOrden, ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.urgenteOrden, 
		       ordenesPorAutorizar.codigoCCEjecuta, ordenesPorAutorizar.nombreCCEjecuta, ordenesPorAutorizar.codigoIngreso, 
		       ordenesPorAutorizar.consecutivoIngreso, ordenesPorAutorizar.fechaPosponer, ordenesPorAutorizar.pyp, ordenesPorAutorizar.codigoPaciente,
		       ordenesPorAutorizar.tipoIdPaciente, ordenesPorAutorizar.numeroIdPaciente, ordenesPorAutorizar.primerNombrePaciente,
		       ordenesPorAutorizar.segundoNombrePaciente, ordenesPorAutorizar.primerApellidoPaciente, ordenesPorAutorizar.segundoApellidoPaciente
			FROM 
			((--Peticiones Sin Registro de Posponer
		      SELECT DISTINCT pet.codigo AS codigoOrden, pet.codigo||'' AS consecutivoOrden, :tipoOrdenAmbServicio AS tipoOrden,
					       :peticion AS claseOrden, pet.fecha_peticion AS fechaOrden, CASE WHEN pet.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
					       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, pp.fecha_posponer AS fechaPosponer,
					       'N' AS pyp, pers.codigo AS codigoPaciente, 
					       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM salascirugia.peticion_qx pet
					  INNER JOIN manejopaciente.ingresos ing ON (ing.id=pet.ingreso)
					  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
					  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					  INNER JOIN salascirugia.peticiones_servicio ps ON (ps.peticion_qx=pet.codigo)
					  INNER JOIN facturacion.servicios serv ON (serv.codigo=ps.servicio)
					  LEFT JOIN salascirugia.solicitudes_cirugia sc ON (sc.codigo_peticion=pet.codigo)
					  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=sc.numero_solicitud)
					  LEFT JOIN ordenes.peticiones_posponer pp ON (pp.peticion=pet.codigo)
			WHERE (pet.fecha_peticion >= :fechaInicio
			           AND pet.fecha_peticion <= :fechaFin)
			  AND pet.estado_peticion in (:estadosPeticion)
			  AND ps.cubierto = :cubierto
			  AND ps.contrato_convenio = :codigoContrato
			  AND serv.nivel = :codigoNivelAtencion
			  AND pp.fecha_posponer IS NULL
			  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
			  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
			  --o que si tiene autorización esta este ANULADA
			  AND (SELECT COUNT(0) 
			       FROM salascirugia.peticiones_servicio ps1
			          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ps1.auto_ent_sub)
			       WHERE ps1.peticion_qx=pet.codigo
			        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
			      ) > 0)
		      UNION 
		      (--Peticiones con Registro de Posponer
		       SELECT DISTINCT pet.codigo AS codigoOrden, pet.codigo||'' AS consecutivoOrden, :tipoOrdenAmbServicio AS tipoOrden,
					       :peticion AS claseOrden, pet.fecha_peticion AS fechaOrden, CASE WHEN pet.urgente= :valorTrueConsulta
					        THEN 'S' ELSE 'N' END AS urgenteOrden, -1 AS codigoCCEjecuta, '' AS nombreCCEjecuta,
					       ing.id AS codigoIngreso, ing.consecutivo AS consecutivoIngreso, pp.fecha_posponer AS fechaPosponer,
					       'N' AS pyp, pers.codigo AS codigoPaciente, 
					       pers.tipo_identificacion AS tipoIdPaciente, pers.numero_identificacion AS numeroIdPaciente,
					       pers.primer_nombre AS primerNombrePaciente, pers.segundo_nombre AS segundoNombrePaciente,
					       pers.primer_apellido AS primerApellidoPaciente, pers.segundo_apellido AS segundoApellidoPaciente
					FROM salascirugia.peticion_qx pet
					  INNER JOIN ordenes.peticiones_posponer pp ON (pp.peticion=pet.codigo)
		        	  INNER JOIN manejopaciente.ingresos ing ON (ing.id=pet.ingreso)
					  INNER JOIN manejopaciente.pacientes paci ON (paci.codigo_paciente=ing.codigo_paciente)
					  INNER JOIN administracion.personas pers ON (pers.codigo=paci.codigo_paciente)
					  INNER JOIN salascirugia.peticiones_servicio ps ON (ps.peticion_qx=pet.codigo)
					  INNER JOIN facturacion.servicios serv ON (serv.codigo=ps.servicio)
					  LEFT JOIN salascirugia.solicitudes_cirugia sc ON (sc.codigo_peticion=pet.codigo)
					  LEFT JOIN ordenes.solicitudes sol ON (sol.numero_solicitud=sc.numero_solicitud)
				WHERE pp.fecha_posponer <= :fechaActual
				  AND pet.estado_peticion in (:estadosPeticion)
				  AND ps.cubierto = :cubierto
				  AND ps.contrato_convenio = :codigoContrato
				  AND serv.nivel = :codigoNivelAtencion
				  AND (sol.numero_solicitud IS NULL OR sol.estado_historia_clinica= :estadoSolHCAnulada)
				  --Se valida que exista por lo menos un servicio de cirugia sin autorizar
				  --o que si tiene autorización esta este ANULADA
				  AND (SELECT COUNT(0) 
				       FROM salascirugia.peticiones_servicio ps1
				          LEFT JOIN manejopaciente.autorizaciones_entidades_sub aes1 ON (aes1.consecutivo=ps1.auto_ent_sub)
				       WHERE ps1.peticion_qx=pet.codigo
				        AND (aes1.consecutivo IS NULL OR aes1.estado= :estadoAutorizacionAnulada)
				      ) > 0)) ordenesPorAutorizar
			ORDER BY ordenesPorAutorizar.fechaOrden, ordenesPorAutorizar.numeroIdPaciente
		]]>
 	</sql-query>
 	
 	<query name="autorizacionCapitacion.obtenerConvenioContratoPorOrdenMedica">
 		SELECT DISTINCT NEW com.servinte.axioma.dto.facturacion.ContratoDto(
 					cont.codigo, cont.numeroContrato, conv.codigo, conv.nombre,
 					tc.codigo, tc.nombre, conv.capitacionSubcontratada,
 					conv.manejaPresupCapitacion,cont.manejaTarifasXCa)
			FROM Solicitudes sol
		    	INNER JOIN sol.detCargoses det
		    	INNER JOIN det.contratos cont
		    	INNER JOIN cont.convenios conv
		    	INNER JOIN conv.tiposContrato tc
		WHERE sol.numeroSolicitud= :codigoOrden
		    AND tc.codigo = :tipoContrato
		    AND conv.capitacionSubcontratada = :capitacionSubcontradada
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerConvenioContratoPorOrdenMedicaCirugia">
 		SELECT DISTINCT NEW com.servinte.axioma.dto.facturacion.ContratoDto(
 					cont.codigo, cont.numeroContrato, conv.codigo, conv.nombre,
 					tc.codigo, tc.nombre, conv.capitacionSubcontratada,
 					conv.manejaPresupCapitacion,cont.manejaTarifasXCa)
			FROM Solicitudes sol
		    	INNER JOIN sol.solicitudesCirugia sc
		    	INNER JOIN sc.solCirugiaPorServicios scps
		    	INNER JOIN scps.contratos cont
		    	INNER JOIN cont.convenios conv
		    	INNER JOIN conv.tiposContrato tc
		WHERE sol.numeroSolicitud= :codigoOrden
		    AND tc.codigo = :tipoContrato
		    AND conv.capitacionSubcontratada = :capitacionSubcontradada
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerConvenioContratoPorOrdenAmbulatoriaArticulo">
 		SELECT DISTINCT NEW com.servinte.axioma.dto.facturacion.ContratoDto(
 					cont.codigo, cont.numeroContrato, conv.codigo, conv.nombre,
 					tc.codigo, tc.nombre, conv.capitacionSubcontratada,
 					conv.manejaPresupCapitacion,cont.manejaTarifasXCa)
			FROM OrdenesAmbulatorias oa
		    	INNER JOIN oa.detOrdenAmbArticulos doaa
		    	INNER JOIN doaa.contratos cont
		    	INNER JOIN cont.convenios conv
		    	INNER JOIN conv.tiposContrato tc
		WHERE oa.codigo= :codigoOrden
		    AND tc.codigo = :tipoContrato
		    AND conv.capitacionSubcontratada = :capitacionSubcontradada
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerConvenioContratoPorOrdenAmbulatoriaServicio">
 		SELECT DISTINCT NEW com.servinte.axioma.dto.facturacion.ContratoDto(
 					cont.codigo, cont.numeroContrato, conv.codigo, conv.nombre,
 					tc.codigo, tc.nombre, conv.capitacionSubcontratada,
 					conv.manejaPresupCapitacion,cont.manejaTarifasXCa)
			FROM OrdenesAmbulatorias oa
		    	INNER JOIN oa.detOrdenAmbServicio doas
		    	INNER JOIN doas.contratos cont
		    	INNER JOIN cont.convenios conv
		    	INNER JOIN conv.tiposContrato tc
		WHERE oa.codigo= :codigoOrden
		    AND tc.codigo = :tipoContrato
		    AND conv.capitacionSubcontratada = :capitacionSubcontradada
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerConvenioContratoPorPeticion">
 		SELECT DISTINCT NEW com.servinte.axioma.dto.facturacion.ContratoDto(
 					cont.codigo, cont.numeroContrato, conv.codigo, conv.nombre,
 					tc.codigo, tc.nombre, conv.capitacionSubcontratada,
 					conv.manejaPresupCapitacion,cont.manejaTarifasXCa)
			FROM PeticionQx pet
		    	INNER JOIN pet.peticionesServicios ps
		    	INNER JOIN ps.contratos cont
		    	INNER JOIN cont.convenios conv
		    	INNER JOIN conv.tiposContrato tc
		WHERE pet.codigo= :codigoOrden
		    AND tc.codigo = :tipoContrato
		    AND conv.capitacionSubcontratada = :capitacionSubcontradada
 	</query>
 	
 	<query name="autorizacionCapitacion.verificarEntidadSubContratadaParametrizada">
		<![CDATA[
			SELECT es.codigoPk, es.razonSocial, es.direccion, es.telefono, cont.consecutivo, cont.tipoTarifa
				FROM EntidadesSubcontratadas es
					INNER JOIN es.contratosEntidadesSubs cont
			WHERE es.codigoPk = :codigoEntidad
				AND es.activo = :activo
				AND cont.fechaInicial <= current_date()
				AND cont.fechaFinal >= current_date()
		]]>
	</query>
	
	<query name="autorizacionCapitacion.obtenerEntidadesSubContratadasExternas">
		<![CDATA[
			SELECT DISTINCT NEW com.servinte.axioma.dto.facturacion.EntidadSubContratadaDto(
									es.codigoPk, es.razonSocial, es.direccion, es.telefono, cces.nroPrioridad,
									cont.consecutivo, cont.tipoTarifa)
				FROM CentrosCosto cc
					INNER JOIN cc.centrosCostoEntidadesSubs cces
					INNER JOIN cces.entidadesSubcontratadas es
					INNER JOIN es.contratosEntidadesSubs cont
			WHERE cc.codigo = :codigoCentroCosto
				AND cces.nroPrioridad IN (:prioridades)
				AND es.activo = :activo
				AND cont.fechaInicial <= current_date()
				AND cont.fechaFinal >= current_date()
			ORDER BY cces.nroPrioridad, es.razonSocial
		]]>
	</query>
 	
 	<sql-query name="autorizacionCapitacion.obtenerServiciosAutorizadosCapitacion">
	 	<return-scalar column="tipo_autorizacion" type="long" />
		<return-scalar column="codigo" type="long" />
		<return-scalar column="consecutivo" type="long" />
		<return-scalar column="fecha_generacion" type="date" />
		<return-scalar column="id_servicio" type="long" />
		<return-scalar column="especialidad" type="integer" />
		<return-scalar column="tipo_servicio" type="string" />
		<return-scalar column="grupo_servicio" type="integer" />
		<return-scalar column="cod_serv" type="string" />
		<return-scalar column="nom_ser" type="string" />
		<return-scalar column="nivel_atencion" type="string" />
		<return-scalar column="cantidad" type="long" />
		<return-scalar column="acronimo_diag" type="string" />
		<return-scalar column="tipo_cie_diag" type="integer" />
		<return-scalar column="diag_descripcion" type="string" />
		<return-scalar column="valor_tarifa" type="double" />
		<return-scalar column="indicativo_temporal" type="string" />
		<return-scalar column="via_ingreso" type="integer" />
		<return-scalar column="id_ingreso" type="long" />
		<return-scalar column="codigo_cuenta" type="long" />
		<return-scalar column="tipo_paciente" type="string" />
		<return-scalar column="tipo_solicitud" type="integer" />
		<return-scalar column="pyp" type="string" />
		<![CDATA[
			SELECT rs.tipo_autorizacion,
			  rs.codigo,
			  rs.consecutivo,
			  rs.fecha_generacion,
			  rs.id_servicio,
			  rs.especialidad,
			  rs.tipo_servicio,
			  rs.grupo_servicio,
			  rs.cod_serv,
			  rs.nom_ser,
			  rs.nivel_atencion,
			  rs.cantidad,
			  rs.acronimo_diag,
			  rs.tipo_cie_diag,
			  rs.diag_descripcion,
			  rs.valor_tarifa,
			  rs.indicativo_temporal,
			  rs.via_ingreso,
			  rs.id_ingreso,
			  rs.codigo_cuenta,
			  rs.tipo_paciente,
			  rs.tipo_solicitud,
			  rs.pyp
			FROM
			  (
			  /*autorizaciones interconsultas*/
			  SELECT 1                          AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad               AS especialidad,
			    serv.tipo_servicio              AS tipo_servicio,
			    serv.grupo_servicio             AS grupo_servicio,
			    rs.codigo_propietario           AS cod_serv,
			    rs.descripcion                  AS nom_ser,
			    na.descripcion                  AS nivel_atencion,
			    aesserv.cantidad                AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesserv.valor_tarifa            AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
			    cu.via_ingreso                  AS via_ingreso,
			    cu.id_ingreso                   AS id_ingreso,
			    cu.id                           AS codigo_cuenta,
			    cu.tipo_paciente                AS tipo_paciente,
			    sol.tipo                        AS tipo_solicitud,
			    sol.pyp||''            AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_solicitudes aess
			  ON aess.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN ordenes.solicitudes_inter si
			  ON si.numero_solicitud = aess.numero_solicitud
			  INNER JOIN ordenes.solicitudes sol
			  ON sol.numero_solicitud=aess.numero_solicitud
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=si.codigo_servicio_solicitado
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  ON (aesserv.autorizacion_ent_sub = aes.consecutivo
			  AND aesserv.servicio             = serv.codigo)
			  INNER JOIN manejopaciente.cuentas cu
			  ON cu.id = sol.cuenta
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo     =sol.acronimo_diagnostico
			  AND diag.tipo_cie     = sol.tipo_cie_diagnostico)
			  WHERE aes.consecutivo = :autorizacion
			  AND rs.tipo_tarifario = :tarifario
			  UNION
			  
			  /*autorizaciones procedimientos*/
			  SELECT 1                          AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad               AS especialidad,
			    serv.tipo_servicio              AS tipo_servicio,
			    serv.grupo_servicio             AS grupo_servicio,
			    rs.codigo_propietario           AS cod_serv,
			    rs.descripcion                  AS nom_ser,
			    na.descripcion                  AS nivel_atencion,
			    aesserv.cantidad                AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesserv.valor_tarifa            AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
			    cu.via_ingreso                  AS via_ingreso,
			    cu.id_ingreso                   AS id_ingreso,
			    cu.id                           AS codigo_cuenta,
			    cu.tipo_paciente                AS tipo_paciente,
			    sol.tipo                        AS tipo_solicitud,
			    sol.pyp||''			            AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_solicitudes aess
			  ON aess.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN ordenes.sol_procedimientos sp
			  ON sp.numero_solicitud = aess.numero_solicitud
			  INNER JOIN ordenes.solicitudes sol
			  ON sol.numero_solicitud=aess.numero_solicitud
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=sp.codigo_servicio_solicitado
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  ON (aesserv.autorizacion_ent_sub = aes.consecutivo
			  AND aesserv.servicio             = serv.codigo)
			  INNER JOIN manejopaciente.cuentas cu
			  ON cu.id = sol.cuenta
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo     =sol.acronimo_diagnostico
			  AND diag.tipo_cie     = sol.tipo_cie_diagnostico)
			  WHERE aes.consecutivo = :autorizacion
			  AND rs.tipo_tarifario = :tarifario
			  UNION
			  
			  /*autorizaciones consultas*/
			  SELECT 1                          AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad               AS especialidad,
			    serv.tipo_servicio              AS tipo_servicio,
			    serv.grupo_servicio             AS grupo_servicio,
			    rs.codigo_propietario           AS cod_serv,
			    rs.descripcion                  AS nom_ser,
			    na.descripcion                  AS nivel_atencion,
			    aesserv.cantidad                AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesserv.valor_tarifa            AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
			    cu.via_ingreso                  AS via_ingreso,
			    cu.id_ingreso                   AS id_ingreso,
			    cu.id                           AS codigo_cuenta,
			    cu.tipo_paciente                AS tipo_paciente,
			    sol.tipo                        AS tipo_solicitud,
			    sol.pyp||''			            AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_solicitudes aess
			  ON aess.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN ordenes.solicitudes_consulta sc
			  ON sc.numero_solicitud = aess.numero_solicitud
			  INNER JOIN ordenes.solicitudes sol
			  ON sol.numero_solicitud=aess.numero_solicitud
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=sc.codigo_servicio_solicitado
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  ON (aesserv.autorizacion_ent_sub = aes.consecutivo
			  AND aesserv.servicio             = serv.codigo)
			  INNER JOIN manejopaciente.cuentas cu
			  ON cu.id = sol.cuenta
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo     =sol.acronimo_diagnostico
			  AND diag.tipo_cie     = sol.tipo_cie_diagnostico)
			  WHERE aes.consecutivo = :autorizacion
			  AND rs.tipo_tarifario = :tarifario
			  UNION
			  
			  /*autorizaciones solicitudes cirugia*/
			  SELECT 1                          AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad               AS especialidad,
			    serv.tipo_servicio              AS tipo_servicio,
			    serv.grupo_servicio             AS grupo_servicio,
			    rs.codigo_propietario           AS cod_serv,
			    rs.descripcion                  AS nom_ser,
			    na.descripcion                  AS nivel_atencion,
			    aesserv.cantidad                AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesserv.valor_tarifa            AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
			    cu.via_ingreso                  AS via_ingreso,
			    cu.id_ingreso                   AS id_ingreso,
			    cu.id                           AS codigo_cuenta,
			    cu.tipo_paciente                AS tipo_paciente,
			    sol.tipo                        AS tipo_solicitud,
			    sol.pyp||''			            AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_solicitudes aess
			  ON aess.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN ordenes.solicitudes sol
			  ON sol.numero_solicitud=aess.numero_solicitud
			  INNER JOIN salascirugia.solicitudes_cirugia sc
			  ON sc.numero_solicitud = aess.numero_solicitud
        	  INNER JOIN SALASCIRUGIA.sol_cirugia_por_servicio scs
        	  ON scs.numero_solicitud = sol.numero_solicitud
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=scs. servicio
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  ON (aesserv.autorizacion_ent_sub = aes.consecutivo
			  AND aesserv.servicio             = serv.codigo)
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  INNER JOIN manejopaciente.cuentas cu
			  ON cu.id = sol.cuenta
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo     =sol.acronimo_diagnostico
			  AND diag.tipo_cie     = sol.tipo_cie_diagnostico)
			  WHERE aes.consecutivo = :autorizacion
			  AND rs.tipo_tarifario = :tarifario
			  
			  UNION
			  
			  /*autorizaciones de peticiones*/
			  SELECT 2        AS tipo_autorizacion,
			    pet_qx.codigo AS codigo,
			    pet_qx.codigo AS consecutivo,
			    --las peticiones no tiene consecutivo mas que el codigo
			    pet_qx.fecha_peticion   AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad       AS especialidad,
			    serv.tipo_servicio      AS tipo_servicio,
			    serv.grupo_servicio     AS grupo_servicio,
			    rs.codigo_propietario   AS cod_serv,
			    rs.descripcion          AS nom_ser,
			    na.descripcion          AS nivel_atencion,
			    aesserv.cantidad        AS cantidad,
			    diag.acronimo           AS acronimo_diag,
			    diag.tipo_cie           AS tipo_cie_diag,
			    diag.nombre             AS diag_descripcion,
			    aesserv.valor_tarifa    AS valor_tarifa,
			    acs.indicativo_temporal AS indicativo_temporal,
			    -2                      AS via_ingreso,
			    pet_qx.ingreso          AS id_ingreso,
			    -2                      AS codigo_cuenta,
			    ''                      AS tipo_paciente,
			    -2                      AS tipo_solicitud,
			    '-2'                    AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_peticiones aesp
			  ON aesp.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN salascirugia.peticion_qx pet_qx
			  ON pet_qx.codigo=aesp.codigo_peticion
			  INNER JOIN salascirugia.peticiones_servicio pet_serv
			  ON (pet_serv.peticion_qx     = pet_qx.codigo
			  AND pet_serv.auto_ent_sub    =aes.consecutivo)
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=pet_serv.servicio
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  ON (aesserv.autorizacion_ent_sub = aes.consecutivo
			  AND aesserv.servicio             =serv.codigo
			  /*se consultan todos los servicios, incluso los relacionados a la cirugia*/
			  )
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON diag.acronimo         =pet_qx.acronimo_diagnostico
			  AND diag.tipo_cie        = pet_qx.tipo_cie_diagnostico
			  WHERE aes.consecutivo    = :autorizacion
			  AND aes.consecutivo NOT IN
			    (SELECT aess.autorizacion_ent_sub
			    FROM ordenes.auto_entsub_solicitudes aess
			    WHERE aess.migrado = :migrado
			    )
			  AND rs.tipo_tarifario = :tarifario
			  UNION
			  
			  /*autorizaciones de ordenes ambulatorias*/
			  SELECT 3                                         AS tipo_autorizacion,
			    oa.codigo                                      AS codigo,
			    to_number(oa.consecutivo_orden,'999999999999') AS consecutivo,
			    oa.fecha                                       AS fecha_generacion,
			    serv.codigo                                    AS id_servicio,
			    serv.especialidad                              AS especialidad,
			    serv.tipo_servicio                             AS tipo_servicio,
			    serv.grupo_servicio                            AS grupo_servicio,
			    rs.codigo_propietario                          AS cod_serv,
			    rs.descripcion                                 AS nom_ser,
			    na.descripcion                                 AS nivel_atencion,
			    aess.cantidad                                  AS cantidad,
			    diag.acronimo                                  AS acronimo_diag,
			    diag.tipo_cie                                  AS tipo_cie_diag,
			    diag.nombre                                    AS diag_descripcion,
			    aess.valor_tarifa                              AS valor_tarifa,
			    acs.indicativo_temporal                        AS indicativo_temporal,
			    -1                                             AS via_ingreso,
			    oa.ingreso                                     AS id_ingreso,
			    -1                                             AS codigo_cuenta,
			    ''                                             AS tipo_paciente,
			    -1						                       AS tipo_solicitud,
			    oa.pyp||''                                     AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_ordenambula aeso
			  ON aeso.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN ordenes.ordenes_ambulatorias oa
			  ON oa.codigo=aeso.codigo_ordenambula
			  INNER JOIN ordenes.det_orden_amb_servicio doas
			  ON (doas.auto_ent_sub = aes.consecutivo
			  AND doas.codigo_orden = oa.codigo)
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=doas.servicio
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aess
			  ON (aess.autorizacion_ent_sub=aes.consecutivo
			  AND aess.servicio            =serv.codigo)
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo        =oa.acronimo_diagnostico
			  AND diag.tipo_cie        = oa.tipo_cie_diagnostico)
			  WHERE aes.consecutivo    = :autorizacion
			  AND aes.consecutivo NOT IN
			    (SELECT aess.autorizacion_ent_sub
			    FROM ordenes.auto_entsub_solicitudes aess
			    WHERE aess.migrado = :migrado
			    )
			  AND rs.tipo_tarifario = :tarifario
			  UNION
			  
			  /*autorizaciones ingreso/estancia*/
			  SELECT 4                  AS tipo_autorizacion,
			    NULL                    AS codigo,
			    NULL                    AS consecutivo,
			    NULL                    AS fecha_generacion,
			    serv.codigo             AS id_servicio,
			    serv.especialidad       AS especialidad,
			    serv.tipo_servicio      AS tipo_servicio,
			    serv.grupo_servicio     AS grupo_servicio,
			    rs.codigo_propietario   AS cod_serv,
			    rs.descripcion          AS nom_ser,
			    na.descripcion          AS nivel_atencion,
			    aess.cantidad           AS cantidad,
			    diag.acronimo           AS acronimo_diag,
			    diag.tipo_cie           AS tipo_cie_diag,
			    diag.nombre             AS diag_descripcion,
			    aess.valor_tarifa       AS valor_tarifa,
			    acs.indicativo_temporal AS indicativo_temporal,
			    ie.via_ingreso_admision AS via_ingreso,
			    -3                      AS id_ingreso,
			    -3                      AS codigo_cuenta,
			    ''                      AS tipo_paciente,
			    -3						AS tipo_solicitud,
			    '-3'                    AS pyp
			  FROM manejopaciente.autorizaciones_ent_sub_servi aess
			  INNER JOIN manejopaciente.autorizaciones_entidades_sub aes
			  ON aes.consecutivo=aess.autorizacion_ent_sub
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=aess.servicio
			  INNER JOIN manejopaciente.autorizaciones_estancia_capita aec
			  ON aec.autorizacion_capitacion_sub= acs.codigo_pk
			  
			  INNER JOIN manejopaciente.autorizaciones_ingre_estancia aie
			  ON aie.codigo_pk = aec.autorizacion_ingre_estancia
        	  INNER JOIN manejopaciente.ingresos_estancia ie
       		  ON ie.codigo_pk = aie.ingreso_estancia

			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo        = ie.diagnostico_principal
			  AND diag.tipo_cie        = ie.tipo_cie_principal)
			  WHERE aes.consecutivo    = :autorizacion
			  AND aes.consecutivo NOT IN
			    (SELECT aess.autorizacion_ent_sub
			    FROM ordenes.auto_entsub_solicitudes aess
			    WHERE aess.migrado = :migrado
			    )
			  AND aes.consecutivo NOT IN
			    (SELECT aeso.autorizacion_ent_sub FROM ordenes.auto_entsub_ordenambula aeso
			    )
			  AND rs.tipo_tarifario = :tarifario
			  UNION 
        	
        	  /*autorizaciones cargos directos*/
			  SELECT 5                          AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad               AS especialidad,
			    serv.tipo_servicio              AS tipo_servicio,
			    serv.grupo_servicio             AS grupo_servicio,
			    rs.codigo_propietario           AS cod_serv,
			    rs.descripcion                  AS nom_ser,
			    na.descripcion                  AS nivel_atencion,
			    aesserv.cantidad                AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesserv.valor_tarifa            AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
			    cu.via_ingreso                  AS via_ingreso,
			    cu.id_ingreso                   AS id_ingreso,
			    cu.id                           AS codigo_cuenta,
			    cu.tipo_paciente                AS tipo_paciente,
			    sol.tipo                        AS tipo_solicitud,
			    sol.pyp||''			            AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_solicitudes aess
			  ON aess.AUTORIZACION_ENT_SUB=aes.consecutivo
			  INNER JOIN ordenes.solicitudes sol
			  ON sol.numero_solicitud=aess.NUMERO_SOLICITUD and sol.tipo in (:tipoSolicitud)
			  INNER JOIN FACTURACION.det_cargos dc 
        	  ON dc.solicitud = sol.numero_solicitud
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  ON aesserv.autorizacion_ent_sub = aes.consecutivo
       		  AND aesserv.servicio = dc.servicio
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=aesserv.servicio
			  
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  INNER JOIN manejopaciente.cuentas cu
			  ON cu.id = sol.cuenta
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo     =sol.acronimo_diagnostico
			  AND diag.tipo_cie     = sol.tipo_cie_diagnostico)
			  WHERE aes.consecutivo    = :autorizacion
			  AND rs.tipo_tarifario = :tarifario
			  ) rs
		]]>
 	</sql-query>
 	
 	<sql-query name="autorizacionCapitacion.obtenerArticulosAutorizadosCapitacion">
	 	<return-scalar column="tipo_autorizacion" type="long" />
		<return-scalar column="codigo" type="long" />
		<return-scalar column="consecutivo" type="long" />
		<return-scalar column="fecha_generacion" type="date" />
		<return-scalar column="cod_art" type="long" />
		<return-scalar column="nom_art" type="string" />
		<return-scalar column="concentracion" type="string" />
		<return-scalar column="forma_farmaceutica" type="string" />
		<return-scalar column="unidad_medida" type="string" />
		<return-scalar column="nat_art" type="string" />
		<return-scalar column="acronimo_nat_art" type="string" />
		<return-scalar column="codigo_subgrupo" type="integer" />
		<return-scalar column="cantidad" type="long" />
		<return-scalar column="acronimo_diag" type="string" />
		<return-scalar column="tipo_cie_diag" type="integer" />
		<return-scalar column="diag_descripcion" type="string" />
		<return-scalar column="valor_tarifa" type="double" />
		<return-scalar column="indicativo_temporal" type="string" />
		<return-scalar column="via_ingreso" type="integer" />
		<return-scalar column="tipo_solicitud" type="integer" />
		<return-scalar column="pyp" type="string" />
		<![CDATA[
			SELECT rs.tipo_autorizacion,
			  rs.codigo,
			  rs.consecutivo,
			  rs.fecha_generacion,
			  rs.cod_art,
			  rs.nom_art,
	          rs.concentracion,
	          rs.forma_farmaceutica,
	          rs.unidad_medida,
			  rs.nat_art,
        	  rs.acronimo_nat_art,
        	  rs.codigo_subgrupo,
			  rs.cantidad,
			  rs.acronimo_diag,
			  rs.tipo_cie_diag,
			  rs.diag_descripcion,
			  rs.valor_tarifa,
			  rs.indicativo_temporal,
			  rs.via_ingreso,
        	  rs.tipo_solicitud,
        	  rs.pyp
			FROM
			  (
			  /*autorizaciones solicitudes*/
			  SELECT 1                          AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    art.codigo                      AS cod_art,
			    art.descripcion                 AS nom_art,
          		art.concentracion               AS concentracion,
          		ff.nombre                       AS forma_farmaceutica,
          		um.nombre                       AS unidad_medida,
			    nat_art.nombre                  AS nat_art,
          
          		nat_art.acronimo                AS acronimo_nat_art,
          		art.subgrupo                    AS codigo_subgrupo,
          
			    aesa.nro_dosis_total            AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesa.valor_tarifa               AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
          		cu.via_ingreso                  AS via_ingreso,
          		sol.tipo                        AS tipo_solicitud,
          		sol.pyp||''			            AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_solicitudes aess
			  ON aess.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN ordenes.solicitudes_medicamentos sm
			  ON sm.numero_solicitud = aess.numero_solicitud
			  INNER JOIN ordenes.solicitudes sol
			  ON sol.numero_solicitud=aess.numero_solicitud
			  INNER JOIN ordenes.detalle_solicitudes ds
			  ON ( ds.numero_solicitud=sol.numero_solicitud
			  AND ds.auto_ent_sub     = aes.consecutivo)
			  INNER JOIN inventarios.articulo art
			  ON art.codigo=ds.articulo
        	  LEFT JOIN INVENTARIOS.forma_farmaceutica ff
			  ON (ff.acronimo=art.forma_farmaceutica and ff.institucion=art.institucion)
         	  LEFT JOIN INVENTARIOS.UNIDAD_MEDIDA um
			  ON um.acronimo=art.UNIDAD_MEDIDA
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_articu aesa
			  ON (aesa.autorizacion_ent_sub = aes.consecutivo AND aesa.articulo = art.codigo)
			  LEFT JOIN inventarios.naturaleza_articulo nat_art
			  ON (nat_art.acronimo    = art.naturaleza
			  AND nat_art.institucion = :institucion)
        	  INNER JOIN manejopaciente.cuentas cu 
        	  ON cu.id = sol.cuenta
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON diag.acronimo      =sol.acronimo_diagnostico
			  AND diag.tipo_cie     = sol.tipo_cie_diagnostico
			  WHERE aes.consecutivo = :autorizacion
			  UNION
			  
			  /*autorizaciones ordenes ambulatorias*/
			  SELECT 3                                         AS tipo_autorizacion,
			    oa.codigo                                      AS codigo,
			    to_number(oa.consecutivo_orden,'999999999999') AS consecutivo,
			    oa.fecha                                       AS fecha_generacion,
			    art.codigo                                     AS cod_art,
			    art.descripcion                                AS nom_art,
          		art.concentracion                              AS concentracion,
         		ff.nombre                                      AS forma_farmaceutica,
          		um.nombre                                      AS unidad_medida,
			    nat_art.nombre                                 AS nat_art,
          		nat_art.acronimo                               AS acronimo_nat_art,
          		art.subgrupo                                   AS codigo_subgrupo,
			    aesa.nro_dosis_total                           AS cantidad,
			    diag.acronimo                                  AS acronimo_diag,
			    diag.tipo_cie                                  AS tipo_cie_diag,
			    diag.nombre                                    AS diag_descripcion,
			    aesa.valor_tarifa                              AS valor_tarifa,
			    acs.indicativo_temporal                        AS indicativo_temporal,
          		-1                                             AS via_ingreso,
          		-1						                       AS tipo_solicitud,
          		oa.pyp||''                                         AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_ordenambula aeso
			  ON aeso.autorizacion_ent_sub=aes.consecutivo
			  INNER JOIN ordenes.ordenes_ambulatorias oa
			  ON oa.codigo=aeso.codigo_ordenambula
			  INNER JOIN ordenes.det_orden_amb_articulo doaa
			  ON (doaa.auto_ent_sub = aes.consecutivo
			  AND doaa.codigo_orden = oa.codigo)
			  INNER JOIN inventarios.articulo art
			  ON art.codigo=doaa.articulo
        	  LEFT JOIN INVENTARIOS.forma_farmaceutica ff
			  ON (ff.acronimo=art.forma_farmaceutica and ff.institucion=art.institucion)
              LEFT JOIN INVENTARIOS.UNIDAD_MEDIDA um
			  ON um.acronimo=art.UNIDAD_MEDIDA
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_articu aesa
			  ON (aesa.autorizacion_ent_sub=aes.consecutivo AND aesa.articulo = art.codigo)
			  LEFT JOIN inventarios.naturaleza_articulo nat_art
			  ON (nat_art.acronimo    = art.naturaleza
			  AND nat_art.institucion = :institucion)
			  LEFT JOIN diagnosticos diag
			  ON (diag.acronimo        =oa.acronimo_diagnostico
			  AND diag.tipo_cie        = oa.tipo_cie_diagnostico)
			  WHERE aes.consecutivo    = :autorizacion
			  AND aes.consecutivo NOT IN
			    (SELECT aess.autorizacion_ent_sub
			    FROM auto_entsub_solicitudes aess
			    WHERE aess.migrado = :migrado
			    )
			  UNION
			  
			  /*autorizaciones ingreso/estancia*/
			  SELECT 4                  AS tipo_autorizacion,
			    NULL                    AS codigo,
			    NULL                    AS consecutivo,
			    NULL                    AS fecha_generacion,
			    art.codigo              AS cod_art,
			    art.descripcion         AS nom_art,
          		art.concentracion               AS concentracion,
          		ff.nombre               AS forma_farmaceutica,
         		um.nombre                       AS unidad_medida,
			    nat_art.nombre          AS nat_art,
          		nat_art.acronimo        AS acronimo_nat_art,
         		art.subgrupo            AS codigo_subgrupo,
			    aesa.nro_dosis_total    AS cantidad,
			    diag.acronimo           AS acronimo_diag,
			    diag.tipo_cie           AS tipo_cie_diag,
			    diag.nombre             AS diag_descripcion,
			    aesa.valor_tarifa       AS valor_tarifa,
			    acs.indicativo_temporal AS indicativo_temporal,
          		ie.via_ingreso_admision AS via_ingreso,
          		-3                      AS tipo_solicitud,
          		'-3'                    AS pyp
			  FROM MANEJOPACIENTE.autorizaciones_ent_sub_articu aesa
			  INNER JOIN manejopaciente.autorizaciones_entidades_sub aes
			  ON aes.consecutivo=aesa.autorizacion_ent_sub
			  INNER JOIN inventarios.articulo art
			  ON art.codigo=aesa.articulo
        	  LEFT JOIN INVENTARIOS.forma_farmaceutica ff
			  ON (ff.acronimo=art.forma_farmaceutica and ff.institucion=art.institucion)
		      LEFT JOIN INVENTARIOS.UNIDAD_MEDIDA um
			  ON um.acronimo=art.UNIDAD_MEDIDA
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub = aes.consecutivo
			  INNER JOIN manejopaciente.autorizaciones_estancia_capita aec
			  ON aec.autorizacion_capitacion_sub= acs.codigo_pk
			  
			  INNER JOIN manejopaciente.autorizaciones_ingre_estancia aie
			  ON aie.codigo_pk=aec.autorizacion_ingre_estancia
        	  INNER JOIN manejopaciente.ingresos_estancia ie
        	  ON ie.codigo_pk = aie.ingreso_estancia
			  
			  LEFT JOIN inventarios.naturaleza_articulo nat_art
			  ON (nat_art.acronimo    = art.naturaleza
			  AND nat_art.institucion = :institucion)
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo     = ie.diagnostico_principal
			  AND diag.tipo_cie     = ie.tipo_cie_principal)
			  WHERE aes.consecutivo = :autorizacion
			  ) rs
		]]>
 	</sql-query>
 	
 	<query name="autorizacionCapitacion.existeAutorizacionCapitaSolicitud">
	 	SELECT NEW com.servinte.axioma.dto.manejoPaciente.AutorizacionPorOrdenDto(
	 			sol.numeroSolicitud,
	 			aes.consecutivo,
	 			aes.consecutivoAutorizacion,
	 			acs.fechaAutoriza,
	 			aess.migrado,
	 			acs.tipoAutorizacion,
	 			conv.codigo,
	 			acs.codigoPk,
	 			acs.consecutivo)
	 		FROM AutorizacionesCapitacionSub acs
  				INNER JOIN acs.autorizacionesEntidadesSub aes
				INNER JOIN aes.autoEntsubSolicitudeses aess
				INNER JOIN aess.solicitudes sol
				INNER JOIN aes.convenios conv
			WHERE sol.numeroSolicitud = :numeroSolicitud
				AND aes.estado IN(:estadosAutorizacion)
 	</query>
 	
 	<query name="autorizacionCapitacion.existeAutorizacionCapitaOrdenAmbulatoria">
	 	SELECT NEW com.servinte.axioma.dto.manejoPaciente.AutorizacionPorOrdenDto(
	 			oa.codigo,
	 			aes.consecutivo,
	 			aes.consecutivoAutorizacion,
	 			acs.fechaAutoriza,
	 			acs.tipoAutorizacion,
	 			conv.codigo,
	 			acs.codigoPk,
	 			acs.consecutivo)
	 		FROM AutorizacionesCapitacionSub acs
  				INNER JOIN acs.autorizacionesEntidadesSub aes
				INNER JOIN aes.autoEntsubOrdenambulas aesoa
				INNER JOIN aesoa.ordenesAmbulatorias oa
				INNER JOIN aes.convenios conv
			WHERE oa.codigo = :codigo
				AND aes.estado IN(:estadosAutorizacion)
 	</query>
 	
 	<query name="autorizacionCapitacion.existeAutorizacionCapitaPeticion">
	 	SELECT NEW com.servinte.axioma.dto.manejoPaciente.AutorizacionPorOrdenDto(
	 			aes.consecutivo,
	 			aes.consecutivoAutorizacion,
	 			acs.fechaAutoriza,
	 			conv.codigo,
	 			acs.codigoPk,
	 			acs.consecutivo)
	 		FROM AutorizacionesCapitacionSub acs
  				INNER JOIN acs.autorizacionesEntidadesSub aes 
				INNER JOIN aes.autoEntsubPeticioneses aesp
				INNER JOIN aesp.peticionQx pet
				INNER JOIN aes.convenios conv
			WHERE pet.codigo = :codigoPeticion 
				AND aes.estado IN(:estadosAutorizacion)
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerSolicitudesAsociadasAutorizacion">
	 	SELECT NEW com.servinte.axioma.dto.manejoPaciente.AutorizacionPorOrdenDto(
	 			sol.numeroSolicitud)
	 		FROM AutorizacionesCapitacionSub acs
  				INNER JOIN acs.autorizacionesEntidadesSub aes 
				INNER JOIN aes.autoEntsubSolicitudeses aess
				INNER JOIN aess.solicitudes sol
			WHERE aes.consecutivo = :consecutivo
				AND sol.numeroSolicitud != :numeroSolicitud
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerOrdenesAmbuAsociadasAutorizacion">
	 	SELECT NEW com.servinte.axioma.dto.manejoPaciente.AutorizacionPorOrdenDto(
	 			oa.codigo)
	 		FROM AutorizacionesCapitacionSub acs
  				INNER JOIN acs.autorizacionesEntidadesSub aes 
				INNER JOIN aes.autoEntsubOrdenambulas aeso
				INNER JOIN aeso.ordenesAmbulatorias oa
			WHERE aes.consecutivo = :consecutivo
				AND oa.codigo != :codigoOrden
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerAutorizacionCapitacionSub">
	 	SELECT  acs
	 		FROM AutorizacionesCapitacionSub acs
  				INNER JOIN acs.autorizacionesEntidadesSub aes
			WHERE aes.consecutivo = :consecutivo
 	</query>
 	
 	<query name="autorizacionCapitacion.obtenerDescripcionServicio">
	 	SELECT rs.descripcion, rs.codigoPropietario, gruposerv.numDiasUrgente, 
	 			gruposerv.acroDiasUrgente, gruposerv.numDiasNormal, 
	 			gruposerv.acroDiasNormal
	 		FROM GruposServicios gruposerv 
	 			INNER JOIN gruposerv.servicioses servicio
	 			INNER JOIN servicio.tiposSerNaturaleza tsn 
				INNER JOIN tsn.tiposServicio ts 
				INNER JOIN servicio.referenciasServicios rs 
				INNER JOIN rs.tarifariosOficiales to 
	 	WHERE servicio.codigo= :codigoServicio		
			AND to.codigo =:tarifarioOficial
 </query>
 
 <query name="autorizacionCapitacion.obtenerAutorizacionEntSubArticulo">
 	SELECT auto FROM AutorizacionesEntSubArticu auto
 	WHERE auto.autorizacionesEntidadesSub.consecutivo = :codigoAutoEntSub
 	AND auto.articulo.codigo = :codigoArticulo
 </query>
 
 <query name="autorizacionCapitacion.obtenerAutorizacionEntSubServicio">
 	SELECT auto FROM AutorizacionesEntSubServi auto
 	WHERE auto.autorizacionesEntidadesSub.consecutivo = :codigoAutoEntSub
 	AND auto.servicios.codigo = :codigoServicio
 </query> 	 	
  
 <query name="autorizacionCapitacion.obtenerDescripcionMedicamentoInsumo">
 	SELECT art.descripcion, art.codigo, art.codigoInterfaz, 
 		   art.concentracion, art.unidadMedida
 		FROM Articulo art
 	WHERE art.codigo = :codigoArticulo
 </query>
 <query name="autorizacionCapitacion.obtenerAutorizacionEntSubDeIngEstancia">
 	SELECT autoEntSub
 	FROM AutorizacionesEstanciaCapita autoEstCap
 	INNER JOIN autoEstCap.autorizacionesIngreEstancia autoIngEst
 	INNER JOIN autoEstCap.autorizacionesCapitacionSub autoCapSub
 	INNER JOIN autoCapSub.autorizacionesEntidadesSub autoEntSub
 	WHERE autoIngEst.codigoPk = :idAutoIngEst
 </query> 	
 
 <query name="autorizacionCapitacion.tieneCoberturaMedicamentoInsumoSolicitud">
 	SELECT det.cubierto
 		FROM Solicitudes sol
 			INNER JOIN sol.detCargoses det
 			INNER JOIN det.articulo art
 			INNER JOIN det.convenios conv
	WHERE sol.numeroSolicitud= :codigoSolicitud
		AND art.codigo= :codigoMedicamentoInsumo
		AND conv.codigo= :codigoConvenio
		AND det.cubierto= :cubierto
 </query>
 
 <query name="autorizacionCapitacion.tieneCoberturaMedicamentoInsumoOrdenAmbulatoria">
 	SELECT doaa.cubierto
 		FROM OrdenesAmbulatorias oa
 			INNER JOIN oa.detOrdenAmbArticulos doaa
 			INNER JOIN doaa.articulo art
 			INNER JOIN doaa.contratos cont
 			INNER JOIN cont.convenios conv
	WHERE oa.codigo= :codigoOrden
		AND art.codigo= :codigoMedicamentoInsumo
		AND conv.codigo= :codigoConvenio
		AND doaa.cubierto= :cubierto
 </query>
 
 <query name="autorizacionCapitacion.obtenerAutorizacionEntCapitacion">
 	SELECT NEW com.servinte.axioma.dto.manejoPaciente.AutorizacionCapitacionDto(
	 			aes.usuarioModificacion, pac.codigoPaciente, esub.codigoPk , ins.codigo, aes.fechaAutorizacion, 
	 			aes.horaAutorizacion, aes.fechaVencimiento, aes.observaciones, aes.estado, 
	 			ca.consecutivo,	cac.codigo, ta.acronimo, es.codigo, acs.tipoAutorizacion, 
	 			acs.otroConvenioRecobro, acs.indicativoTemporal, acs.descripcionEntidad,
	 			acs.direccionEntidad, acs.telefonoEntidad, aesm.valormonto, 
	 			aesm.porcentajemonto, aesm.tipomonto, aesm.tipodetallemonto)
	 		FROM AutorizacionesEntidadesSub aes	
	 			INNER JOIN aes.autorizacionesCapitacionSubs acs
	 			INNER JOIN aes.autorizacionesEntSubMontoses aesm	 			
	 			INNER JOIN aes.pacientes pac
	 			LEFT  JOIN aes.entidadesSubcontratadas esub
	 			LEFT  JOIN aes.instituciones ins
	 			LEFT  JOIN aes.centroAtencion ca
	 			LEFT  JOIN acs.convenios cac
	 			LEFT  JOIN acs.tiposAfiliado ta
	 			LEFT  JOIN acs.estratosSociales es
	 			LEFT  JOIN aesm.viasIngreso
			WHERE aes.consecutivo = :codAutorizacion
 </query>
  
 <query name="autorizacionCapitacion.obtenerDetalleAutorizacionSolProcedimientos">
 	 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.OrdenAutorizacionDto(
	 	sp.numeroSolicitud,	aess.urgente, aess.valorTarifa, scss.codigo, na.codigoPk,	
	 	cont.codigo, fs.codigo, cc.codigo, vi.codigo, acs.tipoEntQueSeAuto, con.codigo,
	 	sol.consecutivoOrdenesMedicas)
		 	FROM AutorizacionesEntidadesSub aes
		 	 	INNER JOIN aes.convenios con
				INNER JOIN aes.solProcedimientoses sp
				INNER JOIN sp.solicitudes sol
				INNER JOIN sp.serviciosByCodigoServicioSolicitado scss
				INNER JOIN sp.finalidadesServicio fs
				INNER JOIN aes.autoCapiXCentroCostos acxcc
				INNER JOIN acxcc.centrosCosto cc
				INNER JOIN aes.autorizacionesCapitacionSubs acs
				INNER JOIN aes.autorizacionesEntSubServis aess
				INNER JOIN aess.nivelAutorizacion na
				INNER JOIN aess.contratos cont
				INNER JOIN aes.autoEntsubSolicitudeses aesol
				LEFT  JOIN aes.autorizacionesEntSubMontoses aesm 
				LEFT  JOIN aesm.viasIngreso vi
			WHERE aes.consecutivo = :codAutorizacion	
				AND sp.numeroSolicitud != :codOrden		
				AND	scss.codigo = aess.servicios.codigo
 </query>
 
  <query name="autorizacionCapitacion.obtenerDetalleAutorizacionOrdenAmbServ">
 	 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.OrdenAutorizacionDto(
	 	oam.codigo,	aess.valorTarifa, serv.codigo, na.codigoPk, cont.codigo, 
	 	fs.codigo, cc.codigo, vi.codigo, acs.tipoEntQueSeAuto, con.codigo, oam.consecutivoOrden)
		 	FROM AutorizacionesEntidadesSub aes
		 		INNER JOIN aes.convenios con
				INNER JOIN aes.detOrdenAmbServicios doas
				INNER JOIN doas.ordenesAmbulatorias oam
				INNER JOIN doas.servicios serv 
				INNER JOIN doas.finalidadesServicio fs
				INNER JOIN aes.autoCapiXCentroCostos acxcc
				INNER JOIN acxcc.centrosCosto cc
				INNER JOIN aes.autorizacionesCapitacionSubs acs
				INNER JOIN aes.autorizacionesEntSubServis aess
				INNER JOIN aess.nivelAutorizacion na
				INNER JOIN aess.contratos cont
				INNER JOIN aes.autoEntsubOrdenambulas aesoa
				LEFT  JOIN aes.autorizacionesEntSubMontoses aesm 
				LEFT  JOIN aesm.viasIngreso vi
			WHERE aes.consecutivo = :codAutorizacion	
				AND oam.codigo != :codOrden		
				AND	serv.codigo = aess.servicios.codigo
 </query>
 
 
 <query name="autorizacionCapitacion.obtenerValorTarifaServiciosAutorizados">
 	 	SELECT NEW com.servinte.axioma.dto.ordenes.ServicioAutorizacionOrdenDto(
 	 							serv.codigo, cont.codigo, niva.consecutivo, grups.codigo,
 	 							aess.valorTarifa)
 	 		FROM AutorizacionesEntidadesSub aes
 	 			INNER JOIN aes.autorizacionesEntSubServis aess
 	 			INNER JOIN aess.servicios serv
				INNER JOIN aess.contratos cont
				LEFT JOIN serv.nivelAtencion niva
				LEFT JOIN serv.gruposServicios grups
			WHERE aes.consecutivo=:consecutivoAutoEntSub
 </query>
 
 <query name="autorizacionCapitacion.obtenerValorTarifaMedicamentosInsumosAutorizados">
 	 	SELECT NEW com.servinte.axioma.dto.ordenes.MedicamentoInsumoAutorizacionOrdenDto(
 	 							art.codigo, cont.codigo, niva.consecutivo, art.subgrupo,
 	 							aesa.valorTarifa, aesa.nroDosisTotal)
 	 		FROM AutorizacionesEntidadesSub aes
 	 			INNER JOIN aes.autorizacionesEntSubArticus aesa
 	 			INNER JOIN aesa.articulo art
				INNER JOIN aesa.contratos cont
				LEFT JOIN art.nivelAtencion niva
			WHERE aes.consecutivo=:consecutivoAutoEntSub
 </query>
 
 <query name="autorizacionCapitacion.existeAutorizacionMedicamentoOrden">
 	 	SELECT sol.numeroSolicitud
 	 		FROM Solicitudes sol
 	 			INNER JOIN sol.ordenesAmbulatoriases oasol
 	 			INNER JOIN oasol.detOrdenAmbArticulos oaa
 	 			INNER JOIN oaa.articulo art
 	 			INNER JOIN oaa.autorizacionesEntidadesSub aes
			WHERE sol.numeroSolicitud=:numeroSolicitud
				AND art.codigo=:codigoMedicamentoInsumo
				AND aes.consecutivo=:consecutivoAutorizacionEntSub
 </query>
 
 <query name="autorizacionCapitacion.existeOrdenAmbAsociadaSolicitud">
 	 	SELECT oasol.consecutivoOrden
 	 		FROM Solicitudes sol
 	 			INNER JOIN sol.ordenesAmbulatoriases oasol
			WHERE sol.numeroSolicitud=:numeroSolicitud
 </query>
 
 <sql-query name="autorizacionCapitacion.obtenerServiciosAnuladosCapitacion">
	 	<return-scalar column="tipo_autorizacion" type="long" />
		<return-scalar column="codigo" type="long" />
		<return-scalar column="consecutivo" type="long" />
		<return-scalar column="fecha_generacion" type="date" />
		<return-scalar column="id_servicio" type="long" />
		<return-scalar column="especialidad" type="integer" />
		<return-scalar column="tipo_servicio" type="string" />
		<return-scalar column="grupo_servicio" type="integer" />
		<return-scalar column="cod_serv" type="string" />
		<return-scalar column="nom_ser" type="string" />
		<return-scalar column="nivel_atencion" type="string" />
		<return-scalar column="cantidad" type="long" />
		<return-scalar column="acronimo_diag" type="string" />
		<return-scalar column="tipo_cie_diag" type="integer" />
		<return-scalar column="diag_descripcion" type="string" />
		<return-scalar column="valor_tarifa" type="double" />
		<return-scalar column="indicativo_temporal" type="string" />
		<return-scalar column="via_ingreso" type="integer" />
		<return-scalar column="id_ingreso" type="long" />
		<return-scalar column="codigo_cuenta" type="long" />
		<return-scalar column="tipo_paciente" type="string" />
		<return-scalar column="tipo_solicitud" type="integer" />
		<return-scalar column="pyp" type="string" />
		<![CDATA[
 			SELECT rs.tipo_autorizacion,
			  rs.codigo,
			  rs.consecutivo,
			  rs.fecha_generacion,
			  rs.id_servicio,
			  rs.especialidad,
			  rs.tipo_servicio,
			  rs.grupo_servicio,
			  rs.cod_serv,
			  rs.nom_ser,
			  rs.nivel_atencion,
			  rs.cantidad,
			  rs.acronimo_diag,
			  rs.tipo_cie_diag,
			  rs.diag_descripcion,
			  rs.valor_tarifa,
			  rs.indicativo_temporal,
			  rs.via_ingreso,
			  rs.id_ingreso,
			  rs.codigo_cuenta,
			  rs.tipo_paciente,
			  rs.tipo_solicitud,
			  rs.pyp
			FROM
			  (
			  /*autorizaciones solicitudes*/
			  SELECT    1                       AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad               AS especialidad,
			    serv.tipo_servicio              AS tipo_servicio,
			    serv.grupo_servicio             AS grupo_servicio,
			    rs.codigo_propietario           AS cod_serv,
			    rs.descripcion                  AS nom_ser,
			    na.descripcion                  AS nivel_atencion,
			    aesserv.cantidad                AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesserv.valor_tarifa            AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
			    cu.via_ingreso                  AS via_ingreso,
			    cu.id_ingreso                   AS id_ingreso,
			    cu.id                           AS codigo_cuenta,
			    cu.tipo_paciente                AS tipo_paciente,
			    sol.tipo                        AS tipo_solicitud,
			    sol.pyp||''			            AS pyp
                FROM manejopaciente.autorizaciones_ent_sub_servi aesserv
                INNER JOIN manejopaciente.autorizaciones_entidades_sub aes
                ON (aes.consecutivo = aesserv.autorizacion_ent_sub)
                INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
                ON (acs.autorizacion_ent_sub = aes.consecutivo)
                INNER JOIN ordenes.auto_entsub_solicitudes aess
			    ON (aess.autorizacion_ent_sub = aes.consecutivo)
                INNER JOIN ordenes.solicitudes sol
			    ON (sol.numero_solicitud = aess.numero_solicitud)
                INNER JOIN facturacion.servicios serv
			    ON (serv.codigo = aesserv.servicio)
			    INNER JOIN facturacion.referencias_servicio rs
			    ON (rs.servicio = serv.codigo)
			    INNER JOIN manejopaciente.cuentas cu
			    ON (cu.id = sol.cuenta)
			    LEFT JOIN capitacion.nivel_atencion na
			    ON (na.consecutivo = serv.nivel)
			    LEFT JOIN manejopaciente.diagnosticos diag
			    ON (diag.acronimo = sol.acronimo_diagnostico
			    AND diag.tipo_cie = sol.tipo_cie_diagnostico)
			    WHERE aes.consecutivo = :autorizacion
			    AND rs.tipo_tarifario = :tarifario
			 
		UNION
			  /*autorizaciones peticiones*/
			 SELECT   2                 AS tipo_autorizacion,
			    pet_qx.codigo           AS codigo,
			    pet_qx.codigo           AS consecutivo,
			    pet_qx.fecha_peticion   AS fecha_generacion,
			    serv.codigo             AS id_servicio,
			    serv.especialidad       AS especialidad,
			    serv.tipo_servicio      AS tipo_servicio,
			    serv.grupo_servicio     AS grupo_servicio,
			    rs.codigo_propietario   AS cod_serv,
			    rs.descripcion          AS nom_ser,
			    na.descripcion          AS nivel_atencion,
			    aesserv.cantidad        AS cantidad,
			    diag.acronimo           AS acronimo_diag,
			    diag.tipo_cie           AS tipo_cie_diag,
			    diag.nombre             AS diag_descripcion,
			    aesserv.valor_tarifa    AS valor_tarifa,
			    acs.indicativo_temporal AS indicativo_temporal,
			    -2                      AS via_ingreso,
			    pet_qx.ingreso          AS id_ingreso,
			    -2                      AS codigo_cuenta,
			    ''                      AS tipo_paciente,
			    -2                      AS tipo_solicitud,
			   '-2'                     AS pyp
         	 FROM manejopaciente.autorizaciones_ent_sub_servi aesserv
          	 INNER JOIN manejopaciente.autorizaciones_entidades_sub aes
          	 ON (aes.consecutivo = aesserv.autorizacion_ent_sub)
          	 INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
         	 ON (acs.autorizacion_ent_sub = aes.consecutivo)
          	 INNER JOIN ordenes.auto_entsub_peticiones aesp
			 ON (aesp.autorizacion_ent_sub = aes.consecutivo)
             INNER JOIN salascirugia.peticion_qx pet_qx
             ON (pet_qx.codigo = aesp.codigo_peticion)
          	 INNER JOIN facturacion.servicios serv
         	 ON (serv.codigo = aesserv.servicio)
         	 INNER JOIN facturacion.referencias_servicio rs
          	 ON (rs.servicio = serv.codigo)
             LEFT JOIN capitacion.nivel_atencion na
             ON (na.consecutivo = serv.nivel)
             LEFT JOIN manejopaciente.diagnosticos diag
             ON (diag.acronimo = pet_qx.acronimo_diagnostico
             AND diag.tipo_cie = pet_qx.tipo_cie_diagnostico)
             WHERE aes.consecutivo = :autorizacion
             AND aes.consecutivo NOT IN
			  (SELECT aess.autorizacion_ent_sub
                FROM ordenes.auto_entsub_solicitudes aess
                WHERE aess.migrado = :migrado
			   )
             AND rs.tipo_tarifario = :tarifario
			 
		UNION 
			 /*autorizaciones orden ambulatoria*/
			  SELECT    3                                      AS tipo_autorizacion,
			    oa.codigo                                      AS codigo,
			    to_number(oa.consecutivo_orden,'999999999999') AS consecutivo,
			    oa.fecha                                       AS fecha_generacion,
			    serv.codigo                                    AS id_servicio,
			    serv.especialidad                              AS especialidad,
			    serv.tipo_servicio                             AS tipo_servicio,
			    serv.grupo_servicio                            AS grupo_servicio,
			    rs.codigo_propietario                          AS cod_serv,
			    rs.descripcion                                 AS nom_ser,
			    na.descripcion                                 AS nivel_atencion,
			    aesserv.cantidad                               AS cantidad,
			    diag.acronimo                                  AS acronimo_diag,
			    diag.tipo_cie                                  AS tipo_cie_diag,
			    diag.nombre                                    AS diag_descripcion,
			    aesserv.valor_tarifa                           AS valor_tarifa,
			    acs.indicativo_temporal                        AS indicativo_temporal,
			    -1                                             AS via_ingreso,
			    oa.ingreso                                     AS id_ingreso,
			    -1                                             AS codigo_cuenta,
			    ''                                             AS tipo_paciente,
			    -1						                       AS tipo_solicitud,
			    oa.pyp||''                                     AS pyp
			  	FROM manejopaciente.autorizaciones_entidades_sub aes
                INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			 	 ON acs.autorizacion_ent_sub =aes.consecutivo
                INNER JOIN ordenes.auto_entsub_ordenambula aeso
				 ON aeso.autorizacion_ent_sub=aes.consecutivo
                INNER JOIN ordenes.ordenes_ambulatorias oa
				 ON oa.codigo=aeso.codigo_ordenambula
        		 INNER JOIN ordenes.det_orden_amb_servicio doas
			  	 ON doas.codigo_orden = oa.codigo
                INNER JOIN facturacion.servicios serv
			 	 ON serv.codigo=doas.servicio
       			 INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  	 ON ( aesserv.servicio=serv.codigo AND aesserv.autorizacion_ent_sub=aes.consecutivo)
			    INNER JOIN facturacion.referencias_servicio rs
			    ON (rs.servicio = serv.codigo)
			    LEFT JOIN capitacion.nivel_atencion na
			    ON (na.consecutivo = serv.nivel)
			    LEFT JOIN manejopaciente.diagnosticos diag
       			 ON (diag.acronimo = oa.acronimo_diagnostico AND diag.tipo_cie = oa.tipo_cie_diagnostico) 
			    WHERE aes.consecutivo = :autorizacion
			    AND aes.consecutivo NOT IN
			     (SELECT aess.autorizacion_ent_sub
			      FROM ordenes.auto_entsub_solicitudes aess
			      WHERE aess.migrado = :migrado
			     )
			    AND rs.tipo_tarifario = :tarifario
			  
		 UNION
			  /*autorizaciones cargos directos*/
			  SELECT 5                          AS tipo_autorizacion,
			    sol.numero_solicitud            AS codigo,
			    sol.consecutivo_ordenes_medicas AS consecutivo,
			    sol.fecha_solicitud             AS fecha_generacion,
			    serv.codigo                     AS id_servicio,
			    serv.especialidad               AS especialidad,
			    serv.tipo_servicio              AS tipo_servicio,
			    serv.grupo_servicio             AS grupo_servicio,
			    rs.codigo_propietario           AS cod_serv,
			    rs.descripcion                  AS nom_ser,
			    na.descripcion                  AS nivel_atencion,
			    aesserv.cantidad                AS cantidad,
			    diag.acronimo                   AS acronimo_diag,
			    diag.tipo_cie                   AS tipo_cie_diag,
			    diag.nombre                     AS diag_descripcion,
			    aesserv.valor_tarifa            AS valor_tarifa,
			    acs.indicativo_temporal         AS indicativo_temporal,
			    cu.via_ingreso                  AS via_ingreso,
			    cu.id_ingreso                   AS id_ingreso,
			    cu.id                           AS codigo_cuenta,
			    cu.tipo_paciente                AS tipo_paciente,
			    sol.tipo                        AS tipo_solicitud,
			    sol.pyp||''			            AS pyp
			  FROM manejopaciente.autorizaciones_entidades_sub aes
			  INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
			  ON acs.autorizacion_ent_sub =aes.consecutivo
			  INNER JOIN ordenes.auto_entsub_solicitudes aess
			  ON aess.AUTORIZACION_ENT_SUB=aes.consecutivo
			  INNER JOIN ordenes.solicitudes sol
			  ON sol.numero_solicitud=aess.NUMERO_SOLICITUD and sol.tipo in (:tipoSolicitud)
			  INNER JOIN FACTURACION.det_cargos dc 
        	  ON dc.solicitud = sol.numero_solicitud
			  INNER JOIN manejopaciente.autorizaciones_ent_sub_servi aesserv
			  ON aesserv.autorizacion_ent_sub = aes.consecutivo
       		  AND aesserv.servicio = dc.servicio
			  INNER JOIN facturacion.servicios serv
			  ON serv.codigo=aesserv.servicio
			  INNER JOIN facturacion.referencias_servicio rs
			  ON rs.servicio=serv.codigo
			  INNER JOIN manejopaciente.cuentas cu
			  ON cu.id = sol.cuenta
			  LEFT JOIN capitacion.nivel_atencion na
			  ON na.consecutivo=serv.nivel
			  LEFT JOIN manejopaciente.diagnosticos diag
			  ON (diag.acronimo     =sol.acronimo_diagnostico
			  AND diag.tipo_cie     = sol.tipo_cie_diagnostico)
			  WHERE aes.consecutivo    = :autorizacion
			  AND rs.tipo_tarifario = :tarifario
			 ) rs
		]]>
 	</sql-query>
 	
 	<sql-query name="autorizacionCapitacion.obtenerArticulosAnuladosCapitacion">
	 	<return-scalar column="tipo_autorizacion" type="long" />
		<return-scalar column="codigo" type="long" />
		<return-scalar column="consecutivo" type="long" />
		<return-scalar column="fecha_generacion" type="date" />
		<return-scalar column="cod_art" type="long" />
		<return-scalar column="nom_art" type="string" />
		<return-scalar column="concentracion" type="string" />
		<return-scalar column="forma_farmaceutica" type="string" />
		<return-scalar column="unidad_medida" type="string" />
		<return-scalar column="nat_art" type="string" />
		<return-scalar column="acronimo_nat_art" type="string" />
		<return-scalar column="codigo_subgrupo" type="integer" />
		<return-scalar column="cantidad" type="long" />
		<return-scalar column="acronimo_diag" type="string" />
		<return-scalar column="tipo_cie_diag" type="integer" />
		<return-scalar column="diag_descripcion" type="string" />
		<return-scalar column="valor_tarifa" type="double" />
		<return-scalar column="indicativo_temporal" type="string" />
		<return-scalar column="via_ingreso" type="integer" />
		<return-scalar column="tipo_solicitud" type="integer" />
		<return-scalar column="pyp" type="string" />
		<![CDATA[
			SELECT rs.tipo_autorizacion,
			  rs.codigo,
			  rs.consecutivo,
			  rs.fecha_generacion,
			  rs.cod_art,
			  rs.nom_art,
	          rs.concentracion,
	          rs.forma_farmaceutica,
	          rs.unidad_medida,
			  rs.nat_art,
        	  rs.acronimo_nat_art,
        	  rs.codigo_subgrupo,
			  rs.cantidad,
			  rs.acronimo_diag,
			  rs.tipo_cie_diag,
			  rs.diag_descripcion,
			  rs.valor_tarifa,
			  rs.indicativo_temporal,
			  rs.via_ingreso,
        	  rs.tipo_solicitud,
        	  rs.pyp
			FROM
			  (
			  /*autorizaciones solicitudes*/
			    SELECT 1                       		AS tipo_autorizacion,
			    	sol.numero_solicitud            AS codigo,
			    	sol.consecutivo_ordenes_medicas AS consecutivo,
			    	sol.fecha_solicitud             AS fecha_generacion,
			    	art.codigo                      AS cod_art,
			    	art.descripcion                 AS nom_art,
          			art.concentracion               AS concentracion,
          			ff.nombre                       AS forma_farmaceutica,
          			um.nombre                       AS unidad_medida,
			   		nat_art.nombre                  AS nat_art,
          			nat_art.acronimo                AS acronimo_nat_art,
          			art.subgrupo                    AS codigo_subgrupo,
			    	aesa.nro_dosis_total            AS cantidad,
			    	diag.acronimo                   AS acronimo_diag,
			    	diag.tipo_cie                   AS tipo_cie_diag,
			    	diag.nombre                     AS diag_descripcion,
			    	aesa.valor_tarifa               AS valor_tarifa,
			    	acs.indicativo_temporal         AS indicativo_temporal,
          			cu.via_ingreso                  AS via_ingreso,
          			sol.tipo                        AS tipo_solicitud,
          			sol.pyp||''			            AS pyp
         		FROM manejopaciente.autorizaciones_ent_sub_articu aesa
          		INNER JOIN manejopaciente.autorizaciones_entidades_sub aes
          		ON (aes.consecutivo = aesa.autorizacion_ent_sub)
         		INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
          		ON (acs.autorizacion_ent_sub = aes.consecutivo) 
          		INNER JOIN ordenes.auto_entsub_solicitudes aess
			   	ON (aess.autorizacion_ent_sub = aes.consecutivo)
         		INNER JOIN ordenes.solicitudes_medicamentos sm
			  	ON (sm.numero_solicitud = aess.numero_solicitud)
			  	INNER JOIN ordenes.solicitudes sol
			    ON (sol.numero_solicitud = aess.numero_solicitud)
        		INNER JOIN inventarios.articulo art
			  	ON (art.codigo = aesa.articulo)
        	  	LEFT JOIN inventarios.forma_farmaceutica ff
			  	ON (ff.acronimo = art.forma_farmaceutica AND ff.institucion = art.institucion)
         	  	LEFT JOIN inventarios.unidad_medida um
			  	ON (um.acronimo = art.unidad_medida)
			  	LEFT JOIN inventarios.naturaleza_articulo nat_art
			  	ON (nat_art.acronimo = art.naturaleza
			  	AND nat_art.institucion = :institucion)
        	  	INNER JOIN manejopaciente.cuentas cu 
        	  	ON (cu.id = sol.cuenta)
			  	LEFT JOIN manejopaciente.diagnosticos diag
			  	ON (diag.acronimo = sol.acronimo_diagnostico AND diag.tipo_cie = sol.tipo_cie_diagnostico)
			  	WHERE aes.consecutivo = :autorizacion
			  	
			  UNION
			  	/*autorizaciones ordenes ambulatorias*/ 
			  	SELECT 3                                           AS tipo_autorizacion,
			    	oa.codigo                                      AS codigo,
			    	to_number(oa.consecutivo_orden,'999999999999') AS consecutivo,
			    	oa.fecha                                       AS fecha_generacion,
			    	art.codigo                                     AS cod_art,
			    	art.descripcion                                AS nom_art,
          			art.concentracion                              AS concentracion,
         			ff.nombre                                      AS forma_farmaceutica,
          			um.nombre                                      AS unidad_medida,
			    	nat_art.nombre                                 AS nat_art,
          			nat_art.acronimo                               AS acronimo_nat_art,
          			art.subgrupo                                   AS codigo_subgrupo,
			    	aesa.nro_dosis_total                           AS cantidad,
			    	diag.acronimo                                  AS acronimo_diag,
			    	diag.tipo_cie                                  AS tipo_cie_diag,
			    	diag.nombre                                    AS diag_descripcion,
			    	aesa.valor_tarifa                              AS valor_tarifa,
			    	acs.indicativo_temporal                        AS indicativo_temporal,
          			-1                                             AS via_ingreso,
          			-1						                       AS tipo_solicitud,
          			oa.pyp||''                                     AS pyp
         		FROM manejopaciente.autorizaciones_ent_sub_articu aesa
          		INNER JOIN manejopaciente.autorizaciones_entidades_sub aes
          		ON (aes.consecutivo = aesa.autorizacion_ent_sub)
          		INNER JOIN manejopaciente.autorizaciones_capitacion_sub acs
          		ON (acs.autorizacion_ent_sub = aes.consecutivo)
          		INNER JOIN ordenes.auto_entsub_ordenambula aeso
			    ON (aeso.autorizacion_ent_sub = aes.consecutivo)
          		INNER JOIN ordenes.ordenes_ambulatorias oa
			    ON (oa.codigo = aeso.codigo_ordenambula)
          		INNER JOIN inventarios.articulo art
			    ON (art.codigo = aesa.articulo)
          		LEFT JOIN inventarios.forma_farmaceutica ff
			    ON (ff.acronimo = art.forma_farmaceutica AND ff.institucion = art.institucion)
          		LEFT JOIN inventarios.unidad_medida um
			    ON (um.acronimo = art.unidad_medida)
			  	LEFT JOIN inventarios.naturaleza_articulo nat_art
			  	ON (nat_art.acronimo = art.naturaleza AND nat_art.institucion = :institucion)
			  	LEFT JOIN diagnosticos diag
			  	ON (diag.acronimo = oa.acronimo_diagnostico AND diag.tipo_cie = oa.tipo_cie_diagnostico)
			    WHERE aes.consecutivo = :autorizacion
			  	AND aes.consecutivo NOT IN
			    (SELECT aess.autorizacion_ent_sub
			    	FROM auto_entsub_solicitudes aess
			    	WHERE aess.migrado = :migrado
			    )
 			) rs
		]]>
 	</sql-query>
 
  <query name="autorizacionCapitacion.obtenerMedicamentosInsumosPorSolicitud">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.ordenes.MedicamentoInsumoAutorizacionOrdenDto(
 					art.codigo, art.codigoInterfaz, art.descripcion, ff.nombre, art.concentracion, 
 					um.nombre, art.subgrupo, nat.id.acronimo, nat.nombre, nat.esMedicamento, niva.consecutivo, 
 					niva.descripcion, diag.id.acronimo, diag.id.tipoCie, diag.nombre, ds.cantidad,
 					ds.dosis, ds.frecuencia, ds.tipoFrecuencia, ds.via, ds.diasTratamiento, detc.cubierto)
 		FROM Solicitudes sol
 			INNER JOIN sol.detCargoses detc
 			INNER JOIN sol.solicitudesMedicamentos sm
 			INNER JOIN sm.detalleSolicitudeses ds
 			INNER JOIN ds.articuloByArticulo art
 			INNER JOIN art.naturalezaArticulo nat
 			LEFT JOIN art.nivelAtencion niva
 			LEFT JOIN art.unidadMedida um 
			LEFT JOIN art.formaFarmaceutica ff 
 			LEFT JOIN ds.autorizacionesEntidadesSub aes
 			LEFT JOIN sol.diagnosticos diag
	WHERE sol.numeroSolicitud= :codigoOrden
		AND detc.articulo=art.codigo
 </query>
 
 <query name="autorizacionCapitacion.existeAutorizacionCapitacionGeneradaPorPeticion">
 	SELECT aess.codigoPk
 		FROM Solicitudes sol
 			INNER JOIN sol.autoEntsubSolicitudeses aess
 			INNER JOIN aess.autorizacionesEntidadesSub aes
	WHERE sol.numeroSolicitud=:numeroSolicitud
		AND aess.migrado=:migrado
		AND aes.estado=:autorizado
 </query>
 
 <query name="autorizacionCapitacion.consultarEntregaAutorizacionEntidadSubContratada">
 	SELECT DISTINCT NEW com.servinte.axioma.dto.manejoPaciente.AutorizacionEntregaDto(
 					ea.id, ea.fechaEntrega, ea.horaEntrega, us.personas.primerApellido,
 					us.personas.segundoApellido, us.personas.primerNombre, 
					us.personas.segundoNombre, ea.personaRecibe, ea.observaciones)
 		FROM EntregaAutorizacion ea
 			INNER JOIN ea.usuarios us
 			INNER JOIN us.personas pe
 			INNER JOIN ea.autorizacionesEntidadesSub aes
	WHERE aes.consecutivo =:idAutorizacionEntidadSub
 </query>
 
  <query name="autorizacionCapitacion.consultarIdAutorizacionEntidadSubXConsecutivoAutorizacion">
	SELECT consecutivo 
		FROM AutorizacionesEntidadesSub aes
		WHERE aes.consecutivoAutorizacion =:consecutivoAutorizacion
  </query>		
   	
   <query name="autorizacionCapitacion.consultarSiPacientePagaAtención">
		SELECT ct.pacientePagaAtencion
		FROM Contratos ct
		WHERE ct.codigo = :codigoContrato
  </query>	
   	
    <query name="autorizacionCapitacion.consultarSiConvenioManejaMontoCobro">
		SELECT convenio.manejaMontos
		FROM Convenios convenio
		WHERE convenio.codigo = :codigoConvenio
  </query>	  	
   	
</hibernate-mapping>
